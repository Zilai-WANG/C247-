{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import keras\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense, Activation, Flatten,Dropout\n",
    "from keras.layers import Conv2D,BatchNormalization,MaxPooling2D,Reshape\n",
    "from keras.utils import to_categorical\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2115, 22, 1000)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7f15c6be31c0>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "## Loading and visualizing the data\n",
    "\n",
    "## Loading the dataset\n",
    "\n",
    "path = \"./project/\"\n",
    "\n",
    "X_test = np.load(path + \"X_test.npy\")\n",
    "y_test = np.load(path + \"y_test.npy\")\n",
    "person_train_valid = np.load(path + \"person_train_valid.npy\")\n",
    "X_train_valid = np.load(path + \"X_train_valid.npy\")\n",
    "print(X_train_valid.shape)\n",
    "y_train_valid = np.load(path + \"y_train_valid.npy\")\n",
    "person_test = np.load(path + \"person_test.npy\")\n",
    "\n",
    "## Adjusting the labels so that \n",
    "\n",
    "# Cue onset left - 0\n",
    "# Cue onset right - 1\n",
    "# Cue onset foot - 2\n",
    "# Cue onset tongue - 3\n",
    "\n",
    "y_train_valid -= 769\n",
    "y_test -= 769\n",
    "\n",
    "## Visualizing the data\n",
    "\n",
    "ch_data = X_train_valid[:,8,:]\n",
    "\n",
    "\n",
    "class_0_ind = np.where(y_train_valid == 0)\n",
    "ch_data_class_0 = ch_data[class_0_ind]\n",
    "avg_ch_data_class_0 = np.mean(ch_data_class_0,axis=0)\n",
    "\n",
    "\n",
    "class_1_ind = np.where(y_train_valid == 1)\n",
    "ch_data_class_1 = ch_data[class_1_ind]\n",
    "avg_ch_data_class_1 = np.mean(ch_data_class_1,axis=0)\n",
    "\n",
    "class_2_ind = np.where(y_train_valid == 2)\n",
    "ch_data_class_2 = ch_data[class_2_ind]\n",
    "avg_ch_data_class_2 = np.mean(ch_data_class_2,axis=0)\n",
    "\n",
    "class_3_ind = np.where(y_train_valid == 3)\n",
    "ch_data_class_3 = ch_data[class_3_ind]\n",
    "avg_ch_data_class_3 = np.mean(ch_data_class_3,axis=0)\n",
    "\n",
    "\n",
    "plt.plot(np.arange(1000),avg_ch_data_class_0)\n",
    "plt.plot(np.arange(1000),avg_ch_data_class_1)\n",
    "plt.plot(np.arange(1000),avg_ch_data_class_2)\n",
    "plt.plot(np.arange(1000),avg_ch_data_class_3)\n",
    "plt.axvline(x=500, label='line at t=500',c='cyan')\n",
    "\n",
    "plt.legend([\"Cue Onset left\", \"Cue Onset right\", \"Cue onset foot\", \"Cue onset tongue\"])\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2115, 22, 500)\n",
      "(2115,)\n",
      "(443, 22, 500)\n",
      "(443,)\n",
      "Shape of training set: (1615, 22, 500)\n",
      "Shape of validation set: (500, 22, 500)\n",
      "Shape of training labels: (1615,)\n",
      "Shape of validation labels: (500,)\n",
      "Shape of training labels after categorical conversion: (1615, 4)\n",
      "Shape of validation labels after categorical conversion: (500, 4)\n",
      "Shape of test labels after categorical conversion: (443, 4)\n",
      "Shape of training set after adding width info: (1615, 22, 500, 1)\n",
      "Shape of validation set after adding width info: (500, 22, 500, 1)\n",
      "Shape of test set after adding width info: (443, 22, 500, 1)\n",
      "Shape of training set after dimension reshaping: (1615, 500, 1, 22)\n",
      "Shape of validation set after dimension reshaping: (500, 500, 1, 22)\n",
      "Shape of test set after dimension reshaping: (443, 500, 1, 22)\n"
     ]
    }
   ],
   "source": [
    "\n",
    "## Preprocessing the dataset\n",
    "\n",
    "X_train_valid_prep = X_train_valid[:,:,0:500]\n",
    "X_test_prep = X_test[:,:,0:500]\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "print(X_train_valid_prep.shape)\n",
    "print(y_train_valid.shape)\n",
    "print(X_test_prep.shape)\n",
    "print(y_test.shape)\n",
    "\n",
    "\n",
    "\n",
    "## Random splitting and reshaping the data\n",
    "\n",
    "# First generating the training and validation indices using random splitting\n",
    "ind_valid = np.random.choice(2115, 500, replace=False)\n",
    "ind_train = np.array(list(set(range(2115)).difference(set(ind_valid))))\n",
    "\n",
    "# Creating the training and validation sets using the generated indices\n",
    "(x_train, x_valid) = X_train_valid_prep[ind_train], X_train_valid_prep[ind_valid] \n",
    "(y_train, y_valid) = y_train_valid[ind_train], y_train_valid[ind_valid]\n",
    "print('Shape of training set:',x_train.shape)\n",
    "print('Shape of validation set:',x_valid.shape)\n",
    "print('Shape of training labels:',y_train.shape)\n",
    "print('Shape of validation labels:',y_valid.shape)\n",
    "\n",
    "\n",
    "# Converting the labels to categorical variables for multiclass classification\n",
    "y_train = to_categorical(y_train, 4)\n",
    "y_valid = to_categorical(y_valid, 4)\n",
    "y_test = to_categorical(y_test, 4)\n",
    "print('Shape of training labels after categorical conversion:',y_train.shape)\n",
    "print('Shape of validation labels after categorical conversion:',y_valid.shape)\n",
    "print('Shape of test labels after categorical conversion:',y_test.shape)\n",
    "\n",
    "# Adding width of the segment to be 1\n",
    "x_train = x_train.reshape(x_train.shape[0], x_train.shape[1], x_train.shape[2], 1)\n",
    "x_valid = x_valid.reshape(x_valid.shape[0], x_valid.shape[1], x_train.shape[2], 1)\n",
    "x_test = X_test_prep.reshape(X_test_prep.shape[0], X_test_prep.shape[1], X_test_prep.shape[2], 1)\n",
    "print('Shape of training set after adding width info:',x_train.shape)\n",
    "print('Shape of validation set after adding width info:',x_valid.shape)\n",
    "print('Shape of test set after adding width info:',x_test.shape)\n",
    "\n",
    "\n",
    "# Reshaping the training and validation dataset\n",
    "x_train = np.swapaxes(x_train, 1,3)\n",
    "x_train = np.swapaxes(x_train, 1,2)\n",
    "x_valid = np.swapaxes(x_valid, 1,3)\n",
    "x_valid = np.swapaxes(x_valid, 1,2)\n",
    "x_test = np.swapaxes(x_test, 1,3)\n",
    "x_test = np.swapaxes(x_test, 1,2)\n",
    "print('Shape of training set after dimension reshaping:',x_train.shape)\n",
    "print('Shape of validation set after dimension reshaping:',x_valid.shape)\n",
    "print('Shape of test set after dimension reshaping:',x_test.shape)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "    \n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " conv2d (Conv2D)             (None, 500, 1, 25)        5525      \n",
      "                                                                 \n",
      " max_pooling2d (MaxPooling2D  (None, 167, 1, 25)       0         \n",
      " )                                                               \n",
      "                                                                 \n",
      " batch_normalization (BatchN  (None, 167, 1, 25)       100       \n",
      " ormalization)                                                   \n",
      "                                                                 \n",
      " dropout (Dropout)           (None, 167, 1, 25)        0         \n",
      "                                                                 \n",
      " conv2d_1 (Conv2D)           (None, 167, 1, 50)        12550     \n",
      "                                                                 \n",
      " max_pooling2d_1 (MaxPooling  (None, 56, 1, 50)        0         \n",
      " 2D)                                                             \n",
      "                                                                 \n",
      " batch_normalization_1 (Batc  (None, 56, 1, 50)        200       \n",
      " hNormalization)                                                 \n",
      "                                                                 \n",
      " dropout_1 (Dropout)         (None, 56, 1, 50)         0         \n",
      "                                                                 \n",
      " conv2d_2 (Conv2D)           (None, 56, 1, 100)        50100     \n",
      "                                                                 \n",
      " max_pooling2d_2 (MaxPooling  (None, 19, 1, 100)       0         \n",
      " 2D)                                                             \n",
      "                                                                 \n",
      " batch_normalization_2 (Batc  (None, 19, 1, 100)       400       \n",
      " hNormalization)                                                 \n",
      "                                                                 \n",
      " dropout_2 (Dropout)         (None, 19, 1, 100)        0         \n",
      "                                                                 \n",
      " conv2d_3 (Conv2D)           (None, 19, 1, 200)        200200    \n",
      "                                                                 \n",
      " max_pooling2d_3 (MaxPooling  (None, 7, 1, 200)        0         \n",
      " 2D)                                                             \n",
      "                                                                 \n",
      " batch_normalization_3 (Batc  (None, 7, 1, 200)        800       \n",
      " hNormalization)                                                 \n",
      "                                                                 \n",
      " dropout_3 (Dropout)         (None, 7, 1, 200)         0         \n",
      "                                                                 \n",
      " flatten (Flatten)           (None, 1400)              0         \n",
      "                                                                 \n",
      " dense (Dense)               (None, 4)                 5604      \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 275,479\n",
      "Trainable params: 274,729\n",
      "Non-trainable params: 750\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-03-11 19:05:26.954598: I tensorflow/core/common_runtime/process_util.cc:146] Creating new thread pool with default inter op setting: 2. Tune using inter_op_parallelism_threads for best performance.\n"
     ]
    }
   ],
   "source": [
    "# Building the CNN model using sequential class\n",
    "basic_cnn_model = Sequential()\n",
    "\n",
    "# Conv. block 1\n",
    "basic_cnn_model.add(Conv2D(filters=25, kernel_size=(10,1), padding='same', activation='elu', input_shape=(500,1,22)))\n",
    "basic_cnn_model.add(MaxPooling2D(pool_size=(3,1), padding='same')) # Read the keras documentation\n",
    "basic_cnn_model.add(BatchNormalization())\n",
    "basic_cnn_model.add(Dropout(0.5))\n",
    "\n",
    "# Conv. block 2\n",
    "basic_cnn_model.add(Conv2D(filters=50, kernel_size=(10,1), padding='same', activation='elu'))\n",
    "basic_cnn_model.add(MaxPooling2D(pool_size=(3,1), padding='same'))\n",
    "basic_cnn_model.add(BatchNormalization())\n",
    "basic_cnn_model.add(Dropout(0.5))\n",
    "\n",
    "# Conv. block 3\n",
    "basic_cnn_model.add(Conv2D(filters=100, kernel_size=(10,1), padding='same', activation='elu'))\n",
    "basic_cnn_model.add(MaxPooling2D(pool_size=(3,1), padding='same'))\n",
    "basic_cnn_model.add(BatchNormalization())\n",
    "basic_cnn_model.add(Dropout(0.5))\n",
    "\n",
    "# Conv. block 4\n",
    "basic_cnn_model.add(Conv2D(filters=200, kernel_size=(10,1), padding='same', activation='elu'))\n",
    "basic_cnn_model.add(MaxPooling2D(pool_size=(3,1), padding='same'))\n",
    "basic_cnn_model.add(BatchNormalization())\n",
    "basic_cnn_model.add(Dropout(0.5))\n",
    "\n",
    "# Output layer with Softmax activation\n",
    "basic_cnn_model.add(Flatten()) # Flattens the input\n",
    "basic_cnn_model.add(Dense(4, activation='softmax')) # Output FC layer with softmax activation\n",
    "\n",
    "\n",
    "# Printing the model summary\n",
    "basic_cnn_model.summary()\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/u/garrick/miniconda3/envs/d2l/lib/python3.9/site-packages/keras/optimizers/legacy/adam.py:117: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.\n",
      "  super().__init__(name, **kwargs)\n"
     ]
    }
   ],
   "source": [
    "# Model parameters\n",
    "learning_rate = 1e-3\n",
    "epochs = 50\n",
    "cnn_optimizer = keras.optimizers.Adam(lr=learning_rate)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/50\n",
      "26/26 [==============================] - 5s 171ms/step - loss: 2.1929 - accuracy: 0.2941 - val_loss: 1.8615 - val_accuracy: 0.3500\n",
      "Epoch 2/50\n",
      "26/26 [==============================] - 4s 143ms/step - loss: 1.9784 - accuracy: 0.3554 - val_loss: 1.3242 - val_accuracy: 0.4460\n",
      "Epoch 3/50\n",
      "26/26 [==============================] - 4s 148ms/step - loss: 1.8424 - accuracy: 0.3554 - val_loss: 1.6583 - val_accuracy: 0.3200\n",
      "Epoch 4/50\n",
      "26/26 [==============================] - 4s 158ms/step - loss: 1.7127 - accuracy: 0.3765 - val_loss: 1.5836 - val_accuracy: 0.3660\n",
      "Epoch 5/50\n",
      "26/26 [==============================] - 4s 158ms/step - loss: 1.5837 - accuracy: 0.3802 - val_loss: 1.3236 - val_accuracy: 0.4260\n",
      "Epoch 6/50\n",
      "26/26 [==============================] - 4s 149ms/step - loss: 1.5359 - accuracy: 0.4161 - val_loss: 1.3096 - val_accuracy: 0.4640\n",
      "Epoch 7/50\n",
      "26/26 [==============================] - 4s 167ms/step - loss: 1.4691 - accuracy: 0.4111 - val_loss: 1.2922 - val_accuracy: 0.4460\n",
      "Epoch 8/50\n",
      "26/26 [==============================] - 4s 146ms/step - loss: 1.4017 - accuracy: 0.4415 - val_loss: 1.2472 - val_accuracy: 0.4460\n",
      "Epoch 9/50\n",
      "26/26 [==============================] - 3s 129ms/step - loss: 1.3578 - accuracy: 0.4508 - val_loss: 1.2764 - val_accuracy: 0.3940\n",
      "Epoch 10/50\n",
      "26/26 [==============================] - 3s 134ms/step - loss: 1.3121 - accuracy: 0.4904 - val_loss: 1.2114 - val_accuracy: 0.4760\n",
      "Epoch 11/50\n",
      "26/26 [==============================] - 4s 150ms/step - loss: 1.2451 - accuracy: 0.4681 - val_loss: 1.1590 - val_accuracy: 0.4880\n",
      "Epoch 12/50\n",
      "26/26 [==============================] - 4s 153ms/step - loss: 1.1986 - accuracy: 0.4991 - val_loss: 1.3153 - val_accuracy: 0.3780\n",
      "Epoch 13/50\n",
      "26/26 [==============================] - 4s 149ms/step - loss: 1.2022 - accuracy: 0.5015 - val_loss: 1.2205 - val_accuracy: 0.4740\n",
      "Epoch 14/50\n",
      "26/26 [==============================] - 4s 146ms/step - loss: 1.1574 - accuracy: 0.5176 - val_loss: 1.2431 - val_accuracy: 0.4800\n",
      "Epoch 15/50\n",
      "26/26 [==============================] - 4s 144ms/step - loss: 1.1453 - accuracy: 0.5362 - val_loss: 1.1997 - val_accuracy: 0.4900\n",
      "Epoch 16/50\n",
      "26/26 [==============================] - 4s 165ms/step - loss: 1.1035 - accuracy: 0.5443 - val_loss: 1.0793 - val_accuracy: 0.5680\n",
      "Epoch 17/50\n",
      "26/26 [==============================] - 4s 150ms/step - loss: 1.1247 - accuracy: 0.5344 - val_loss: 1.0478 - val_accuracy: 0.5780\n",
      "Epoch 18/50\n",
      "26/26 [==============================] - 4s 139ms/step - loss: 1.1133 - accuracy: 0.5591 - val_loss: 1.2462 - val_accuracy: 0.5060\n",
      "Epoch 19/50\n",
      "26/26 [==============================] - 4s 158ms/step - loss: 1.0784 - accuracy: 0.5616 - val_loss: 1.1542 - val_accuracy: 0.4960\n",
      "Epoch 20/50\n",
      "26/26 [==============================] - 4s 158ms/step - loss: 1.0442 - accuracy: 0.5728 - val_loss: 1.1240 - val_accuracy: 0.5280\n",
      "Epoch 21/50\n",
      "26/26 [==============================] - 4s 152ms/step - loss: 1.0219 - accuracy: 0.5895 - val_loss: 1.1707 - val_accuracy: 0.4920\n",
      "Epoch 22/50\n",
      "26/26 [==============================] - 4s 153ms/step - loss: 0.9943 - accuracy: 0.5913 - val_loss: 1.1005 - val_accuracy: 0.5200\n",
      "Epoch 23/50\n",
      "26/26 [==============================] - 4s 153ms/step - loss: 0.9625 - accuracy: 0.6118 - val_loss: 1.0259 - val_accuracy: 0.5520\n",
      "Epoch 24/50\n",
      "26/26 [==============================] - 4s 150ms/step - loss: 0.9839 - accuracy: 0.5950 - val_loss: 1.0104 - val_accuracy: 0.5860\n",
      "Epoch 25/50\n",
      "26/26 [==============================] - 4s 150ms/step - loss: 0.9639 - accuracy: 0.6025 - val_loss: 0.9759 - val_accuracy: 0.5980\n",
      "Epoch 26/50\n",
      "26/26 [==============================] - 4s 145ms/step - loss: 0.9544 - accuracy: 0.6235 - val_loss: 0.8931 - val_accuracy: 0.6580\n",
      "Epoch 27/50\n",
      "26/26 [==============================] - 4s 152ms/step - loss: 0.9903 - accuracy: 0.5938 - val_loss: 1.1057 - val_accuracy: 0.5340\n",
      "Epoch 28/50\n",
      "26/26 [==============================] - 4s 145ms/step - loss: 0.9364 - accuracy: 0.6000 - val_loss: 0.9531 - val_accuracy: 0.6100\n",
      "Epoch 29/50\n",
      "26/26 [==============================] - 4s 137ms/step - loss: 0.9059 - accuracy: 0.6279 - val_loss: 0.9859 - val_accuracy: 0.6160\n",
      "Epoch 30/50\n",
      "26/26 [==============================] - 4s 141ms/step - loss: 0.9022 - accuracy: 0.6390 - val_loss: 0.9997 - val_accuracy: 0.5840\n",
      "Epoch 31/50\n",
      "26/26 [==============================] - 3s 132ms/step - loss: 0.8893 - accuracy: 0.6557 - val_loss: 0.9628 - val_accuracy: 0.6120\n",
      "Epoch 32/50\n",
      "26/26 [==============================] - 4s 157ms/step - loss: 0.8961 - accuracy: 0.6477 - val_loss: 0.9052 - val_accuracy: 0.6380\n",
      "Epoch 33/50\n",
      "26/26 [==============================] - 4s 146ms/step - loss: 0.8577 - accuracy: 0.6625 - val_loss: 0.9787 - val_accuracy: 0.5940\n",
      "Epoch 34/50\n",
      "26/26 [==============================] - 4s 150ms/step - loss: 0.8408 - accuracy: 0.6681 - val_loss: 0.9761 - val_accuracy: 0.5920\n",
      "Epoch 35/50\n",
      "26/26 [==============================] - 4s 143ms/step - loss: 0.7983 - accuracy: 0.6687 - val_loss: 1.0005 - val_accuracy: 0.6120\n",
      "Epoch 36/50\n",
      "26/26 [==============================] - 3s 128ms/step - loss: 0.8570 - accuracy: 0.6539 - val_loss: 1.0144 - val_accuracy: 0.5880\n",
      "Epoch 37/50\n",
      "26/26 [==============================] - 4s 137ms/step - loss: 0.8282 - accuracy: 0.6551 - val_loss: 0.9279 - val_accuracy: 0.6280\n",
      "Epoch 38/50\n",
      "26/26 [==============================] - 4s 153ms/step - loss: 0.8036 - accuracy: 0.6780 - val_loss: 0.9167 - val_accuracy: 0.6120\n",
      "Epoch 39/50\n",
      "26/26 [==============================] - 4s 157ms/step - loss: 0.8260 - accuracy: 0.6588 - val_loss: 0.8966 - val_accuracy: 0.6500\n",
      "Epoch 40/50\n",
      "26/26 [==============================] - 4s 152ms/step - loss: 0.7781 - accuracy: 0.6848 - val_loss: 0.9872 - val_accuracy: 0.6200\n",
      "Epoch 41/50\n",
      "26/26 [==============================] - 4s 150ms/step - loss: 0.7812 - accuracy: 0.6910 - val_loss: 0.9305 - val_accuracy: 0.6360\n",
      "Epoch 42/50\n",
      "26/26 [==============================] - 4s 155ms/step - loss: 0.7498 - accuracy: 0.7071 - val_loss: 0.9484 - val_accuracy: 0.6160\n",
      "Epoch 43/50\n",
      "26/26 [==============================] - 4s 157ms/step - loss: 0.7611 - accuracy: 0.7034 - val_loss: 1.0119 - val_accuracy: 0.5920\n",
      "Epoch 44/50\n",
      "26/26 [==============================] - 4s 151ms/step - loss: 0.7528 - accuracy: 0.7040 - val_loss: 0.8704 - val_accuracy: 0.6620\n",
      "Epoch 45/50\n",
      "26/26 [==============================] - 4s 143ms/step - loss: 0.7156 - accuracy: 0.7214 - val_loss: 0.8767 - val_accuracy: 0.6440\n",
      "Epoch 46/50\n",
      "26/26 [==============================] - 4s 151ms/step - loss: 0.7318 - accuracy: 0.7146 - val_loss: 0.8860 - val_accuracy: 0.6520\n",
      "Epoch 47/50\n",
      "26/26 [==============================] - 4s 160ms/step - loss: 0.7259 - accuracy: 0.7195 - val_loss: 0.8606 - val_accuracy: 0.6460\n",
      "Epoch 48/50\n",
      "26/26 [==============================] - 4s 152ms/step - loss: 0.6996 - accuracy: 0.7288 - val_loss: 0.9742 - val_accuracy: 0.6180\n",
      "Epoch 49/50\n",
      "26/26 [==============================] - 4s 137ms/step - loss: 0.7406 - accuracy: 0.7034 - val_loss: 0.8470 - val_accuracy: 0.6660\n",
      "Epoch 50/50\n",
      "26/26 [==============================] - 4s 159ms/step - loss: 0.7041 - accuracy: 0.7195 - val_loss: 0.9098 - val_accuracy: 0.6460\n"
     ]
    }
   ],
   "source": [
    "# Compiling the model\n",
    "basic_cnn_model.compile(loss='categorical_crossentropy',\n",
    "                 optimizer=cnn_optimizer,\n",
    "                 metrics=['accuracy'])\n",
    "\n",
    "# Training and validating the model\n",
    "basic_cnn_model_results = basic_cnn_model.fit(x_train,\n",
    "             y_train,\n",
    "             batch_size=64,\n",
    "             epochs=epochs,\n",
    "             validation_data=(x_valid, y_valid), verbose=True)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Plotting accuracy trajectory\n",
    "plt.plot(basic_cnn_model_results.history['accuracy'])\n",
    "plt.plot(basic_cnn_model_results.history['val_accuracy'])\n",
    "plt.title('Basic CNN model accuracy trajectory')\n",
    "plt.ylabel('accuracy')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train', 'val'], loc='upper left')\n",
    "plt.show()\n",
    "\n",
    "# Plotting loss trajectory\n",
    "plt.plot(basic_cnn_model_results.history['loss'],'o')\n",
    "plt.plot(basic_cnn_model_results.history['val_loss'],'o')\n",
    "plt.title('Basic CNN model loss trajectory')\n",
    "plt.ylabel('loss')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train', 'val'], loc='upper left')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test accuracy of the basic CNN model: 0.6320541501045227\n"
     ]
    }
   ],
   "source": [
    "## Testing the basic CNN model\n",
    "\n",
    "cnn_score = basic_cnn_model.evaluate(x_test, y_test, verbose=0)\n",
    "print('Test accuracy of the basic CNN model:',cnn_score[1])"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# CNN + More complex architecture"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_2\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " conv2d_6 (Conv2D)           (None, 500, 1, 25)        5525      \n",
      "                                                                 \n",
      " max_pooling2d_5 (MaxPooling  (None, 167, 1, 25)       0         \n",
      " 2D)                                                             \n",
      "                                                                 \n",
      " batch_normalization_5 (Batc  (None, 167, 1, 25)       100       \n",
      " hNormalization)                                                 \n",
      "                                                                 \n",
      " dropout_5 (Dropout)         (None, 167, 1, 25)        0         \n",
      "                                                                 \n",
      " conv2d_7 (Conv2D)           (None, 167, 1, 50)        12550     \n",
      "                                                                 \n",
      " max_pooling2d_6 (MaxPooling  (None, 56, 1, 50)        0         \n",
      " 2D)                                                             \n",
      "                                                                 \n",
      " batch_normalization_6 (Batc  (None, 56, 1, 50)        200       \n",
      " hNormalization)                                                 \n",
      "                                                                 \n",
      " dropout_6 (Dropout)         (None, 56, 1, 50)         0         \n",
      "                                                                 \n",
      " conv2d_8 (Conv2D)           (None, 56, 1, 100)        50100     \n",
      "                                                                 \n",
      " max_pooling2d_7 (MaxPooling  (None, 19, 1, 100)       0         \n",
      " 2D)                                                             \n",
      "                                                                 \n",
      " batch_normalization_7 (Batc  (None, 19, 1, 100)       400       \n",
      " hNormalization)                                                 \n",
      "                                                                 \n",
      " dropout_7 (Dropout)         (None, 19, 1, 100)        0         \n",
      "                                                                 \n",
      " conv2d_9 (Conv2D)           (None, 19, 1, 200)        200200    \n",
      "                                                                 \n",
      " max_pooling2d_8 (MaxPooling  (None, 7, 1, 200)        0         \n",
      " 2D)                                                             \n",
      "                                                                 \n",
      " batch_normalization_8 (Batc  (None, 7, 1, 200)        800       \n",
      " hNormalization)                                                 \n",
      "                                                                 \n",
      " dropout_8 (Dropout)         (None, 7, 1, 200)         0         \n",
      "                                                                 \n",
      " conv2d_10 (Conv2D)          (None, 7, 1, 400)         800400    \n",
      "                                                                 \n",
      " max_pooling2d_9 (MaxPooling  (None, 3, 1, 400)        0         \n",
      " 2D)                                                             \n",
      "                                                                 \n",
      " batch_normalization_9 (Batc  (None, 3, 1, 400)        1600      \n",
      " hNormalization)                                                 \n",
      "                                                                 \n",
      " dropout_9 (Dropout)         (None, 3, 1, 400)         0         \n",
      "                                                                 \n",
      " conv2d_11 (Conv2D)          (None, 3, 1, 800)         3200800   \n",
      "                                                                 \n",
      " max_pooling2d_10 (MaxPoolin  (None, 1, 1, 800)        0         \n",
      " g2D)                                                            \n",
      "                                                                 \n",
      " batch_normalization_10 (Bat  (None, 1, 1, 800)        3200      \n",
      " chNormalization)                                                \n",
      "                                                                 \n",
      " dropout_10 (Dropout)        (None, 1, 1, 800)         0         \n",
      "                                                                 \n",
      " conv2d_12 (Conv2D)          (None, 1, 1, 1600)        12801600  \n",
      "                                                                 \n",
      " max_pooling2d_11 (MaxPoolin  (None, 1, 1, 1600)       0         \n",
      " g2D)                                                            \n",
      "                                                                 \n",
      " batch_normalization_11 (Bat  (None, 1, 1, 1600)       6400      \n",
      " chNormalization)                                                \n",
      "                                                                 \n",
      " dropout_11 (Dropout)        (None, 1, 1, 1600)        0         \n",
      "                                                                 \n",
      " conv2d_13 (Conv2D)          (None, 1, 1, 3200)        51203200  \n",
      "                                                                 \n",
      " max_pooling2d_12 (MaxPoolin  (None, 1, 1, 3200)       0         \n",
      " g2D)                                                            \n",
      "                                                                 \n",
      " batch_normalization_12 (Bat  (None, 1, 1, 3200)       12800     \n",
      " chNormalization)                                                \n",
      "                                                                 \n",
      " dropout_12 (Dropout)        (None, 1, 1, 3200)        0         \n",
      "                                                                 \n",
      " conv2d_14 (Conv2D)          (None, 1, 1, 6400)        204806400 \n",
      "                                                                 \n",
      " max_pooling2d_13 (MaxPoolin  (None, 1, 1, 6400)       0         \n",
      " g2D)                                                            \n",
      "                                                                 \n",
      " batch_normalization_13 (Bat  (None, 1, 1, 6400)       25600     \n",
      " chNormalization)                                                \n",
      "                                                                 \n",
      " dropout_13 (Dropout)        (None, 1, 1, 6400)        0         \n",
      "                                                                 \n",
      " conv2d_15 (Conv2D)          (None, 1, 1, 12800)       819212800 \n",
      "                                                                 \n",
      " max_pooling2d_14 (MaxPoolin  (None, 1, 1, 12800)      0         \n",
      " g2D)                                                            \n",
      "                                                                 \n",
      " batch_normalization_14 (Bat  (None, 1, 1, 12800)      51200     \n",
      " chNormalization)                                                \n",
      "                                                                 \n",
      " dropout_14 (Dropout)        (None, 1, 1, 12800)       0         \n",
      "                                                                 \n",
      " flatten_1 (Flatten)         (None, 12800)             0         \n",
      "                                                                 \n",
      " dense_1 (Dense)             (None, 4)                 51204     \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 1,092,447,079\n",
      "Trainable params: 1,092,395,929\n",
      "Non-trainable params: 51,150\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "from keras.models import Sequential\n",
    "from keras.layers import Conv2D, MaxPooling2D, BatchNormalization, Dropout, Flatten, Dense\n",
    "\n",
    "# Building the CNN model using sequential class\n",
    "complex_cnn_model = Sequential()\n",
    "\n",
    "# Input shape\n",
    "input_shape = (500, 1, 22)\n",
    "\n",
    "\n",
    "    \n",
    "# Conv. block 1\n",
    "complex_cnn_model.add(Conv2D(filters=25, kernel_size=(10, 1), padding='same', activation='elu', input_shape=(500,1,22)))\n",
    "complex_cnn_model.add(MaxPooling2D(pool_size=(3, 1), padding='same'))\n",
    "complex_cnn_model.add(BatchNormalization())\n",
    "complex_cnn_model.add(Dropout(0.5))\n",
    "\n",
    "# Conv. block 2\n",
    "complex_cnn_model.add(Conv2D(filters=50, kernel_size=(10, 1), padding='same', activation='elu'))\n",
    "complex_cnn_model.add(MaxPooling2D(pool_size=(3, 1), padding='same'))\n",
    "complex_cnn_model.add(BatchNormalization())\n",
    "complex_cnn_model.add(Dropout(0.5))\n",
    "\n",
    "# Conv. block 3\n",
    "complex_cnn_model.add(Conv2D(filters=100, kernel_size=(10, 1), padding='same', activation='elu'))\n",
    "complex_cnn_model.add(MaxPooling2D(pool_size=(3, 1), padding='same'))\n",
    "complex_cnn_model.add(BatchNormalization())\n",
    "complex_cnn_model.add(Dropout(0.5))\n",
    "\n",
    "# Conv. block 4\n",
    "complex_cnn_model.add(Conv2D(filters=200, kernel_size=(10, 1), padding='same', activation='elu'))\n",
    "complex_cnn_model.add(MaxPooling2D(pool_size=(3, 1), padding='same'))\n",
    "complex_cnn_model.add(BatchNormalization())\n",
    "complex_cnn_model.add(Dropout(0.5))\n",
    "\n",
    "# Conv. block 5\n",
    "complex_cnn_model.add(Conv2D(filters=400, kernel_size=(10, 1), padding='same', activation='elu'))\n",
    "complex_cnn_model.add(MaxPooling2D(pool_size=(3, 1), padding='same'))\n",
    "complex_cnn_model.add(BatchNormalization())\n",
    "complex_cnn_model.add(Dropout(0.5))\n",
    "\n",
    "# Conv. block 6\n",
    "complex_cnn_model.add(Conv2D(filters=800, kernel_size=(10, 1), padding='same', activation='elu'))\n",
    "complex_cnn_model.add(MaxPooling2D(pool_size=(3, 1), padding='same'))\n",
    "complex_cnn_model.add(BatchNormalization())\n",
    "complex_cnn_model.add(Dropout(0.5))\n",
    "\n",
    "# Conv. block 7\n",
    "complex_cnn_model.add(Conv2D(filters=1600, kernel_size=(10, 1), padding='same', activation='elu'))\n",
    "complex_cnn_model.add(MaxPooling2D(pool_size=(3, 1), padding='same'))\n",
    "complex_cnn_model.add(BatchNormalization())\n",
    "complex_cnn_model.add(Dropout(0.5))\n",
    "\n",
    "# Output layer with Softmax activation\n",
    "complex_cnn_model.add(Flatten()) # Flattens the input\n",
    "complex_cnn_model.add(Dense(4, activation='softmax')) # Output FC layer with softmax activation\n",
    "\n",
    "# Printing the model summary\n",
    "complex_cnn_model.summary()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using device: cuda:1\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "\n",
    "# Set device to GPU 1\n",
    "device = torch.device(\"cuda:1\" if torch.cuda.is_available() else \"cpu\")\n",
    "\n",
    "# Check which device is being used\n",
    "print(f\"Using device: {device}\")\n",
    "\n",
    "# # To ensure your tensors are created on GPU 1\n",
    "# tensor_on_gpu1 = torch.tensor([1.0, 2.0], device=device)\n",
    "\n",
    "# # To move an existing tensor to GPU 1\n",
    "# tensor = torch.tensor([1.0, 2.0])\n",
    "# tensor_to_gpu1 = tensor.to(device)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/u/garrick/miniconda3/envs/d2l/lib/python3.9/site-packages/keras/optimizers/legacy/adam.py:117: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.\n",
      "  super().__init__(name, **kwargs)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/50\n",
      "26/26 [==============================] - 434s 15s/step - loss: 3.2229 - accuracy: 0.2644 - val_loss: 43.5561 - val_accuracy: 0.2080\n",
      "Epoch 2/50\n",
      "26/26 [==============================] - 388s 15s/step - loss: 2.1320 - accuracy: 0.2762 - val_loss: 9.2604 - val_accuracy: 0.2660\n",
      "Epoch 3/50\n",
      "26/26 [==============================] - 387s 15s/step - loss: 1.9149 - accuracy: 0.2836 - val_loss: 5.0904 - val_accuracy: 0.3040\n",
      "Epoch 4/50\n",
      "26/26 [==============================] - 398s 15s/step - loss: 1.9937 - accuracy: 0.2879 - val_loss: 4.7879 - val_accuracy: 0.3280\n",
      "Epoch 5/50\n",
      "26/26 [==============================] - 397s 15s/step - loss: 2.0539 - accuracy: 0.3121 - val_loss: 4.8783 - val_accuracy: 0.3020\n",
      "Epoch 6/50\n",
      "26/26 [==============================] - 392s 15s/step - loss: 2.3080 - accuracy: 0.2985 - val_loss: 2.4492 - val_accuracy: 0.3520\n",
      "Epoch 7/50\n",
      "26/26 [==============================] - 397s 15s/step - loss: 1.9439 - accuracy: 0.2904 - val_loss: 1.7042 - val_accuracy: 0.3180\n",
      "Epoch 8/50\n",
      "26/26 [==============================] - 359s 14s/step - loss: 1.8992 - accuracy: 0.3084 - val_loss: 1.8769 - val_accuracy: 0.2640\n",
      "Epoch 9/50\n",
      "26/26 [==============================] - 269s 10s/step - loss: 1.9659 - accuracy: 0.3090 - val_loss: 1.5738 - val_accuracy: 0.3380\n",
      "Epoch 10/50\n",
      "26/26 [==============================] - 267s 10s/step - loss: 1.8475 - accuracy: 0.3418 - val_loss: 1.4998 - val_accuracy: 0.3360\n",
      "Epoch 11/50\n",
      "26/26 [==============================] - 270s 10s/step - loss: 1.8082 - accuracy: 0.3672 - val_loss: 1.8868 - val_accuracy: 0.3180\n",
      "Epoch 12/50\n",
      "26/26 [==============================] - 269s 10s/step - loss: 1.8340 - accuracy: 0.3653 - val_loss: 3.1223 - val_accuracy: 0.2800\n",
      "Epoch 13/50\n",
      "26/26 [==============================] - 270s 10s/step - loss: 1.9514 - accuracy: 0.3474 - val_loss: 2.5005 - val_accuracy: 0.2580\n",
      "Epoch 14/50\n",
      "26/26 [==============================] - 269s 10s/step - loss: 1.9195 - accuracy: 0.3257 - val_loss: 2.0648 - val_accuracy: 0.3000\n",
      "Epoch 15/50\n",
      "26/26 [==============================] - 268s 10s/step - loss: 2.0145 - accuracy: 0.3467 - val_loss: 2.1053 - val_accuracy: 0.2900\n",
      "Epoch 16/50\n",
      "26/26 [==============================] - 268s 10s/step - loss: 1.9752 - accuracy: 0.3511 - val_loss: 2.9267 - val_accuracy: 0.2960\n",
      "Epoch 17/50\n",
      "26/26 [==============================] - 270s 10s/step - loss: 2.2488 - accuracy: 0.3127 - val_loss: 2.4391 - val_accuracy: 0.3140\n",
      "Epoch 18/50\n",
      "26/26 [==============================] - 266s 10s/step - loss: 2.0403 - accuracy: 0.3226 - val_loss: 1.8011 - val_accuracy: 0.4080\n",
      "Epoch 19/50\n",
      "26/26 [==============================] - 269s 10s/step - loss: 1.8294 - accuracy: 0.3579 - val_loss: 1.4532 - val_accuracy: 0.3720\n",
      "Epoch 20/50\n",
      "26/26 [==============================] - 267s 10s/step - loss: 1.9674 - accuracy: 0.3622 - val_loss: 1.4569 - val_accuracy: 0.3860\n",
      "Epoch 21/50\n",
      "26/26 [==============================] - 267s 10s/step - loss: 2.4639 - accuracy: 0.3245 - val_loss: 1.8891 - val_accuracy: 0.3600\n",
      "Epoch 22/50\n",
      "26/26 [==============================] - 268s 10s/step - loss: 2.7077 - accuracy: 0.3331 - val_loss: 2.3671 - val_accuracy: 0.2980\n",
      "Epoch 23/50\n",
      "26/26 [==============================] - 278s 11s/step - loss: 1.9209 - accuracy: 0.3406 - val_loss: 6.6767 - val_accuracy: 0.2880\n",
      "Epoch 24/50\n",
      "26/26 [==============================] - 269s 10s/step - loss: 2.1173 - accuracy: 0.3232 - val_loss: 1.7481 - val_accuracy: 0.2720\n",
      "Epoch 25/50\n",
      "26/26 [==============================] - 270s 10s/step - loss: 1.9607 - accuracy: 0.3350 - val_loss: 1.5260 - val_accuracy: 0.3180\n",
      "Epoch 26/50\n",
      "26/26 [==============================] - 270s 10s/step - loss: 1.9782 - accuracy: 0.3437 - val_loss: 1.4431 - val_accuracy: 0.3900\n",
      "Epoch 27/50\n",
      "26/26 [==============================] - 268s 10s/step - loss: 2.2260 - accuracy: 0.3393 - val_loss: 4.1256 - val_accuracy: 0.3380\n",
      "Epoch 28/50\n",
      "26/26 [==============================] - 268s 10s/step - loss: 2.0120 - accuracy: 0.3418 - val_loss: 1.9940 - val_accuracy: 0.3360\n",
      "Epoch 29/50\n",
      "26/26 [==============================] - 270s 10s/step - loss: 2.2383 - accuracy: 0.3288 - val_loss: 2.6056 - val_accuracy: 0.3400\n",
      "Epoch 30/50\n",
      "26/26 [==============================] - 268s 10s/step - loss: 1.9443 - accuracy: 0.3610 - val_loss: 1.5100 - val_accuracy: 0.3800\n",
      "Epoch 31/50\n",
      "26/26 [==============================] - 270s 10s/step - loss: 1.9174 - accuracy: 0.3455 - val_loss: 1.4739 - val_accuracy: 0.4300\n",
      "Epoch 32/50\n",
      "26/26 [==============================] - 270s 10s/step - loss: 1.7800 - accuracy: 0.3585 - val_loss: 1.6376 - val_accuracy: 0.3740\n",
      "Epoch 33/50\n",
      "26/26 [==============================] - 268s 10s/step - loss: 1.9617 - accuracy: 0.3381 - val_loss: 1.2890 - val_accuracy: 0.4120\n",
      "Epoch 34/50\n",
      "26/26 [==============================] - 267s 10s/step - loss: 1.9723 - accuracy: 0.3498 - val_loss: 1.3985 - val_accuracy: 0.4060\n",
      "Epoch 35/50\n",
      "26/26 [==============================] - 268s 10s/step - loss: 1.7597 - accuracy: 0.3554 - val_loss: 1.4269 - val_accuracy: 0.3560\n",
      "Epoch 36/50\n",
      "26/26 [==============================] - 270s 10s/step - loss: 2.4302 - accuracy: 0.3474 - val_loss: 1.7134 - val_accuracy: 0.3080\n",
      "Epoch 37/50\n",
      "26/26 [==============================] - 278s 11s/step - loss: 2.3078 - accuracy: 0.3102 - val_loss: 1.9448 - val_accuracy: 0.2480\n",
      "Epoch 38/50\n",
      "26/26 [==============================] - 267s 10s/step - loss: 1.9804 - accuracy: 0.3375 - val_loss: 1.3760 - val_accuracy: 0.3520\n",
      "Epoch 39/50\n",
      "26/26 [==============================] - 269s 10s/step - loss: 1.9859 - accuracy: 0.3331 - val_loss: 1.4064 - val_accuracy: 0.3780\n",
      "Epoch 40/50\n",
      "26/26 [==============================] - 268s 10s/step - loss: 2.5804 - accuracy: 0.3393 - val_loss: 15.0901 - val_accuracy: 0.3220\n",
      "Epoch 41/50\n",
      "26/26 [==============================] - 278s 11s/step - loss: 2.2567 - accuracy: 0.3474 - val_loss: 3.9362 - val_accuracy: 0.4100\n",
      "Epoch 42/50\n",
      "26/26 [==============================] - 269s 10s/step - loss: 2.1768 - accuracy: 0.3598 - val_loss: 1.5640 - val_accuracy: 0.3780\n",
      "Epoch 43/50\n",
      "26/26 [==============================] - 269s 10s/step - loss: 2.0228 - accuracy: 0.3381 - val_loss: 1.5064 - val_accuracy: 0.2860\n",
      "Epoch 44/50\n",
      "26/26 [==============================] - 340s 13s/step - loss: 2.3746 - accuracy: 0.3313 - val_loss: 1.7039 - val_accuracy: 0.2640\n",
      "Epoch 45/50\n",
      "26/26 [==============================] - 331s 13s/step - loss: 2.1554 - accuracy: 0.3467 - val_loss: 1.4891 - val_accuracy: 0.3160\n",
      "Epoch 46/50\n",
      "26/26 [==============================] - 323s 12s/step - loss: 1.7742 - accuracy: 0.3498 - val_loss: 1.3598 - val_accuracy: 0.2840\n",
      "Epoch 47/50\n",
      "26/26 [==============================] - 323s 12s/step - loss: 1.8672 - accuracy: 0.3498 - val_loss: 1.3407 - val_accuracy: 0.3640\n",
      "Epoch 48/50\n",
      "26/26 [==============================] - 319s 12s/step - loss: 1.9158 - accuracy: 0.3635 - val_loss: 1.3001 - val_accuracy: 0.4020\n",
      "Epoch 49/50\n",
      "26/26 [==============================] - 322s 12s/step - loss: 2.1353 - accuracy: 0.3399 - val_loss: 1.3780 - val_accuracy: 0.3200\n",
      "Epoch 50/50\n",
      "26/26 [==============================] - 320s 12s/step - loss: 2.4837 - accuracy: 0.3399 - val_loss: 2.0706 - val_accuracy: 0.2760\n"
     ]
    }
   ],
   "source": [
    "# Model parameters\n",
    "learning_rate = 1e-3\n",
    "epochs = 50\n",
    "cnn_optimizer = keras.optimizers.Adam(lr=learning_rate)\n",
    "\n",
    "# Compiling the model\n",
    "complex_cnn_model.compile(loss='categorical_crossentropy',\n",
    "                 optimizer=cnn_optimizer,\n",
    "                 metrics=['accuracy'])\n",
    "\n",
    "# Training and validating the model\n",
    "complex_cnn_model_results = complex_cnn_model.fit(x_train,\n",
    "             y_train,\n",
    "             batch_size=64,\n",
    "             epochs=epochs,\n",
    "             validation_data=(x_valid, y_valid), verbose=True)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test accuracy of the complex CNN model: 0.3340857923030853\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Plotting accuracy trajectory\n",
    "plt.plot(complex_cnn_model_results.history['accuracy'])\n",
    "plt.plot(complex_cnn_model_results.history['val_accuracy'])\n",
    "plt.title('Complex CNN model accuracy trajectory')\n",
    "plt.ylabel('accuracy')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train', 'val'], loc='upper left')\n",
    "plt.show()\n",
    "\n",
    "# Plotting loss trajectory\n",
    "plt.plot(complex_cnn_model_results.history['loss'],'o')\n",
    "plt.plot(complex_cnn_model_results.history['val_loss'],'o')\n",
    "plt.title('Complex CNN model loss trajectory')\n",
    "plt.ylabel('loss')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train', 'val'], loc='upper left')\n",
    "plt.show()\n",
    "\n",
    "## Testing the basic CNN model\n",
    "\n",
    "cnn_score = complex_cnn_model.evaluate(x_test, y_test, verbose=0)\n",
    "print('Test accuracy of the complex CNN model:',cnn_score[1])"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Residual Net"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model\"\n",
      "__________________________________________________________________________________________________\n",
      " Layer (type)                   Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      " input_1 (InputLayer)           [(None, 500, 1, 22)  0           []                               \n",
      "                                ]                                                                 \n",
      "                                                                                                  \n",
      " conv2d_16 (Conv2D)             (None, 500, 1, 64)   14144       ['input_1[0][0]']                \n",
      "                                                                                                  \n",
      " max_pooling2d_15 (MaxPooling2D  (None, 167, 1, 64)  0           ['conv2d_16[0][0]']              \n",
      " )                                                                                                \n",
      "                                                                                                  \n",
      " dropout_15 (Dropout)           (None, 167, 1, 64)   0           ['max_pooling2d_15[0][0]']       \n",
      "                                                                                                  \n",
      " conv2d_17 (Conv2D)             (None, 167, 1, 64)   41024       ['dropout_15[0][0]']             \n",
      "                                                                                                  \n",
      " batch_normalization_15 (BatchN  (None, 167, 1, 64)  256         ['conv2d_17[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " activation (Activation)        (None, 167, 1, 64)   0           ['batch_normalization_15[0][0]'] \n",
      "                                                                                                  \n",
      " conv2d_18 (Conv2D)             (None, 167, 1, 64)   41024       ['activation[0][0]']             \n",
      "                                                                                                  \n",
      " batch_normalization_16 (BatchN  (None, 167, 1, 64)  256         ['conv2d_18[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " add (Add)                      (None, 167, 1, 64)   0           ['batch_normalization_16[0][0]', \n",
      "                                                                  'dropout_15[0][0]']             \n",
      "                                                                                                  \n",
      " activation_1 (Activation)      (None, 167, 1, 64)   0           ['add[0][0]']                    \n",
      "                                                                                                  \n",
      " max_pooling2d_16 (MaxPooling2D  (None, 56, 1, 64)   0           ['activation_1[0][0]']           \n",
      " )                                                                                                \n",
      "                                                                                                  \n",
      " dropout_16 (Dropout)           (None, 56, 1, 64)    0           ['max_pooling2d_16[0][0]']       \n",
      "                                                                                                  \n",
      " conv2d_19 (Conv2D)             (None, 56, 1, 64)    41024       ['dropout_16[0][0]']             \n",
      "                                                                                                  \n",
      " batch_normalization_17 (BatchN  (None, 56, 1, 64)   256         ['conv2d_19[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " activation_2 (Activation)      (None, 56, 1, 64)    0           ['batch_normalization_17[0][0]'] \n",
      "                                                                                                  \n",
      " conv2d_20 (Conv2D)             (None, 56, 1, 64)    41024       ['activation_2[0][0]']           \n",
      "                                                                                                  \n",
      " batch_normalization_18 (BatchN  (None, 56, 1, 64)   256         ['conv2d_20[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " add_1 (Add)                    (None, 56, 1, 64)    0           ['batch_normalization_18[0][0]', \n",
      "                                                                  'dropout_16[0][0]']             \n",
      "                                                                                                  \n",
      " activation_3 (Activation)      (None, 56, 1, 64)    0           ['add_1[0][0]']                  \n",
      "                                                                                                  \n",
      " max_pooling2d_17 (MaxPooling2D  (None, 19, 1, 64)   0           ['activation_3[0][0]']           \n",
      " )                                                                                                \n",
      "                                                                                                  \n",
      " dropout_17 (Dropout)           (None, 19, 1, 64)    0           ['max_pooling2d_17[0][0]']       \n",
      "                                                                                                  \n",
      " conv2d_21 (Conv2D)             (None, 19, 1, 64)    41024       ['dropout_17[0][0]']             \n",
      "                                                                                                  \n",
      " batch_normalization_19 (BatchN  (None, 19, 1, 64)   256         ['conv2d_21[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " activation_4 (Activation)      (None, 19, 1, 64)    0           ['batch_normalization_19[0][0]'] \n",
      "                                                                                                  \n",
      " conv2d_22 (Conv2D)             (None, 19, 1, 64)    41024       ['activation_4[0][0]']           \n",
      "                                                                                                  \n",
      " batch_normalization_20 (BatchN  (None, 19, 1, 64)   256         ['conv2d_22[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " add_2 (Add)                    (None, 19, 1, 64)    0           ['batch_normalization_20[0][0]', \n",
      "                                                                  'dropout_17[0][0]']             \n",
      "                                                                                                  \n",
      " activation_5 (Activation)      (None, 19, 1, 64)    0           ['add_2[0][0]']                  \n",
      "                                                                                                  \n",
      " max_pooling2d_18 (MaxPooling2D  (None, 7, 1, 64)    0           ['activation_5[0][0]']           \n",
      " )                                                                                                \n",
      "                                                                                                  \n",
      " dropout_18 (Dropout)           (None, 7, 1, 64)     0           ['max_pooling2d_18[0][0]']       \n",
      "                                                                                                  \n",
      " conv2d_23 (Conv2D)             (None, 7, 1, 64)     41024       ['dropout_18[0][0]']             \n",
      "                                                                                                  \n",
      " batch_normalization_21 (BatchN  (None, 7, 1, 64)    256         ['conv2d_23[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " activation_6 (Activation)      (None, 7, 1, 64)     0           ['batch_normalization_21[0][0]'] \n",
      "                                                                                                  \n",
      " conv2d_24 (Conv2D)             (None, 7, 1, 64)     41024       ['activation_6[0][0]']           \n",
      "                                                                                                  \n",
      " batch_normalization_22 (BatchN  (None, 7, 1, 64)    256         ['conv2d_24[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " add_3 (Add)                    (None, 7, 1, 64)     0           ['batch_normalization_22[0][0]', \n",
      "                                                                  'dropout_18[0][0]']             \n",
      "                                                                                                  \n",
      " activation_7 (Activation)      (None, 7, 1, 64)     0           ['add_3[0][0]']                  \n",
      "                                                                                                  \n",
      " max_pooling2d_19 (MaxPooling2D  (None, 3, 1, 64)    0           ['activation_7[0][0]']           \n",
      " )                                                                                                \n",
      "                                                                                                  \n",
      " dropout_19 (Dropout)           (None, 3, 1, 64)     0           ['max_pooling2d_19[0][0]']       \n",
      "                                                                                                  \n",
      " conv2d_25 (Conv2D)             (None, 3, 1, 64)     41024       ['dropout_19[0][0]']             \n",
      "                                                                                                  \n",
      " batch_normalization_23 (BatchN  (None, 3, 1, 64)    256         ['conv2d_25[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " activation_8 (Activation)      (None, 3, 1, 64)     0           ['batch_normalization_23[0][0]'] \n",
      "                                                                                                  \n",
      " conv2d_26 (Conv2D)             (None, 3, 1, 64)     41024       ['activation_8[0][0]']           \n",
      "                                                                                                  \n",
      " batch_normalization_24 (BatchN  (None, 3, 1, 64)    256         ['conv2d_26[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " add_4 (Add)                    (None, 3, 1, 64)     0           ['batch_normalization_24[0][0]', \n",
      "                                                                  'dropout_19[0][0]']             \n",
      "                                                                                                  \n",
      " activation_9 (Activation)      (None, 3, 1, 64)     0           ['add_4[0][0]']                  \n",
      "                                                                                                  \n",
      " max_pooling2d_20 (MaxPooling2D  (None, 1, 1, 64)    0           ['activation_9[0][0]']           \n",
      " )                                                                                                \n",
      "                                                                                                  \n",
      " dropout_20 (Dropout)           (None, 1, 1, 64)     0           ['max_pooling2d_20[0][0]']       \n",
      "                                                                                                  \n",
      " conv2d_27 (Conv2D)             (None, 1, 1, 64)     41024       ['dropout_20[0][0]']             \n",
      "                                                                                                  \n",
      " batch_normalization_25 (BatchN  (None, 1, 1, 64)    256         ['conv2d_27[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " activation_10 (Activation)     (None, 1, 1, 64)     0           ['batch_normalization_25[0][0]'] \n",
      "                                                                                                  \n",
      " conv2d_28 (Conv2D)             (None, 1, 1, 64)     41024       ['activation_10[0][0]']          \n",
      "                                                                                                  \n",
      " batch_normalization_26 (BatchN  (None, 1, 1, 64)    256         ['conv2d_28[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " add_5 (Add)                    (None, 1, 1, 64)     0           ['batch_normalization_26[0][0]', \n",
      "                                                                  'dropout_20[0][0]']             \n",
      "                                                                                                  \n",
      " activation_11 (Activation)     (None, 1, 1, 64)     0           ['add_5[0][0]']                  \n",
      "                                                                                                  \n",
      " max_pooling2d_21 (MaxPooling2D  (None, 1, 1, 64)    0           ['activation_11[0][0]']          \n",
      " )                                                                                                \n",
      "                                                                                                  \n",
      " dropout_21 (Dropout)           (None, 1, 1, 64)     0           ['max_pooling2d_21[0][0]']       \n",
      "                                                                                                  \n",
      " conv2d_29 (Conv2D)             (None, 1, 1, 64)     41024       ['dropout_21[0][0]']             \n",
      "                                                                                                  \n",
      " batch_normalization_27 (BatchN  (None, 1, 1, 64)    256         ['conv2d_29[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " activation_12 (Activation)     (None, 1, 1, 64)     0           ['batch_normalization_27[0][0]'] \n",
      "                                                                                                  \n",
      " conv2d_30 (Conv2D)             (None, 1, 1, 64)     41024       ['activation_12[0][0]']          \n",
      "                                                                                                  \n",
      " batch_normalization_28 (BatchN  (None, 1, 1, 64)    256         ['conv2d_30[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " add_6 (Add)                    (None, 1, 1, 64)     0           ['batch_normalization_28[0][0]', \n",
      "                                                                  'dropout_21[0][0]']             \n",
      "                                                                                                  \n",
      " activation_13 (Activation)     (None, 1, 1, 64)     0           ['add_6[0][0]']                  \n",
      "                                                                                                  \n",
      " max_pooling2d_22 (MaxPooling2D  (None, 1, 1, 64)    0           ['activation_13[0][0]']          \n",
      " )                                                                                                \n",
      "                                                                                                  \n",
      " dropout_22 (Dropout)           (None, 1, 1, 64)     0           ['max_pooling2d_22[0][0]']       \n",
      "                                                                                                  \n",
      " conv2d_31 (Conv2D)             (None, 1, 1, 64)     41024       ['dropout_22[0][0]']             \n",
      "                                                                                                  \n",
      " batch_normalization_29 (BatchN  (None, 1, 1, 64)    256         ['conv2d_31[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " activation_14 (Activation)     (None, 1, 1, 64)     0           ['batch_normalization_29[0][0]'] \n",
      "                                                                                                  \n",
      " conv2d_32 (Conv2D)             (None, 1, 1, 64)     41024       ['activation_14[0][0]']          \n",
      "                                                                                                  \n",
      " batch_normalization_30 (BatchN  (None, 1, 1, 64)    256         ['conv2d_32[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " add_7 (Add)                    (None, 1, 1, 64)     0           ['batch_normalization_30[0][0]', \n",
      "                                                                  'dropout_22[0][0]']             \n",
      "                                                                                                  \n",
      " activation_15 (Activation)     (None, 1, 1, 64)     0           ['add_7[0][0]']                  \n",
      "                                                                                                  \n",
      " max_pooling2d_23 (MaxPooling2D  (None, 1, 1, 64)    0           ['activation_15[0][0]']          \n",
      " )                                                                                                \n",
      "                                                                                                  \n",
      " dropout_23 (Dropout)           (None, 1, 1, 64)     0           ['max_pooling2d_23[0][0]']       \n",
      "                                                                                                  \n",
      " conv2d_33 (Conv2D)             (None, 1, 1, 64)     41024       ['dropout_23[0][0]']             \n",
      "                                                                                                  \n",
      " batch_normalization_31 (BatchN  (None, 1, 1, 64)    256         ['conv2d_33[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " activation_16 (Activation)     (None, 1, 1, 64)     0           ['batch_normalization_31[0][0]'] \n",
      "                                                                                                  \n",
      " conv2d_34 (Conv2D)             (None, 1, 1, 64)     41024       ['activation_16[0][0]']          \n",
      "                                                                                                  \n",
      " batch_normalization_32 (BatchN  (None, 1, 1, 64)    256         ['conv2d_34[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " add_8 (Add)                    (None, 1, 1, 64)     0           ['batch_normalization_32[0][0]', \n",
      "                                                                  'dropout_23[0][0]']             \n",
      "                                                                                                  \n",
      " activation_17 (Activation)     (None, 1, 1, 64)     0           ['add_8[0][0]']                  \n",
      "                                                                                                  \n",
      " max_pooling2d_24 (MaxPooling2D  (None, 1, 1, 64)    0           ['activation_17[0][0]']          \n",
      " )                                                                                                \n",
      "                                                                                                  \n",
      " dropout_24 (Dropout)           (None, 1, 1, 64)     0           ['max_pooling2d_24[0][0]']       \n",
      "                                                                                                  \n",
      " conv2d_35 (Conv2D)             (None, 1, 1, 64)     41024       ['dropout_24[0][0]']             \n",
      "                                                                                                  \n",
      " batch_normalization_33 (BatchN  (None, 1, 1, 64)    256         ['conv2d_35[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " activation_18 (Activation)     (None, 1, 1, 64)     0           ['batch_normalization_33[0][0]'] \n",
      "                                                                                                  \n",
      " conv2d_36 (Conv2D)             (None, 1, 1, 64)     41024       ['activation_18[0][0]']          \n",
      "                                                                                                  \n",
      " batch_normalization_34 (BatchN  (None, 1, 1, 64)    256         ['conv2d_36[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " add_9 (Add)                    (None, 1, 1, 64)     0           ['batch_normalization_34[0][0]', \n",
      "                                                                  'dropout_24[0][0]']             \n",
      "                                                                                                  \n",
      " activation_19 (Activation)     (None, 1, 1, 64)     0           ['add_9[0][0]']                  \n",
      "                                                                                                  \n",
      " max_pooling2d_25 (MaxPooling2D  (None, 1, 1, 64)    0           ['activation_19[0][0]']          \n",
      " )                                                                                                \n",
      "                                                                                                  \n",
      " dropout_25 (Dropout)           (None, 1, 1, 64)     0           ['max_pooling2d_25[0][0]']       \n",
      "                                                                                                  \n",
      " conv2d_37 (Conv2D)             (None, 1, 1, 64)     41024       ['dropout_25[0][0]']             \n",
      "                                                                                                  \n",
      " batch_normalization_35 (BatchN  (None, 1, 1, 64)    256         ['conv2d_37[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " activation_20 (Activation)     (None, 1, 1, 64)     0           ['batch_normalization_35[0][0]'] \n",
      "                                                                                                  \n",
      " conv2d_38 (Conv2D)             (None, 1, 1, 64)     41024       ['activation_20[0][0]']          \n",
      "                                                                                                  \n",
      " batch_normalization_36 (BatchN  (None, 1, 1, 64)    256         ['conv2d_38[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " add_10 (Add)                   (None, 1, 1, 64)     0           ['batch_normalization_36[0][0]', \n",
      "                                                                  'dropout_25[0][0]']             \n",
      "                                                                                                  \n",
      " activation_21 (Activation)     (None, 1, 1, 64)     0           ['add_10[0][0]']                 \n",
      "                                                                                                  \n",
      " max_pooling2d_26 (MaxPooling2D  (None, 1, 1, 64)    0           ['activation_21[0][0]']          \n",
      " )                                                                                                \n",
      "                                                                                                  \n",
      " dropout_26 (Dropout)           (None, 1, 1, 64)     0           ['max_pooling2d_26[0][0]']       \n",
      "                                                                                                  \n",
      " conv2d_39 (Conv2D)             (None, 1, 1, 64)     41024       ['dropout_26[0][0]']             \n",
      "                                                                                                  \n",
      " batch_normalization_37 (BatchN  (None, 1, 1, 64)    256         ['conv2d_39[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " activation_22 (Activation)     (None, 1, 1, 64)     0           ['batch_normalization_37[0][0]'] \n",
      "                                                                                                  \n",
      " conv2d_40 (Conv2D)             (None, 1, 1, 64)     41024       ['activation_22[0][0]']          \n",
      "                                                                                                  \n",
      " batch_normalization_38 (BatchN  (None, 1, 1, 64)    256         ['conv2d_40[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " add_11 (Add)                   (None, 1, 1, 64)     0           ['batch_normalization_38[0][0]', \n",
      "                                                                  'dropout_26[0][0]']             \n",
      "                                                                                                  \n",
      " activation_23 (Activation)     (None, 1, 1, 64)     0           ['add_11[0][0]']                 \n",
      "                                                                                                  \n",
      " max_pooling2d_27 (MaxPooling2D  (None, 1, 1, 64)    0           ['activation_23[0][0]']          \n",
      " )                                                                                                \n",
      "                                                                                                  \n",
      " dropout_27 (Dropout)           (None, 1, 1, 64)     0           ['max_pooling2d_27[0][0]']       \n",
      "                                                                                                  \n",
      " conv2d_41 (Conv2D)             (None, 1, 1, 64)     41024       ['dropout_27[0][0]']             \n",
      "                                                                                                  \n",
      " batch_normalization_39 (BatchN  (None, 1, 1, 64)    256         ['conv2d_41[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " activation_24 (Activation)     (None, 1, 1, 64)     0           ['batch_normalization_39[0][0]'] \n",
      "                                                                                                  \n",
      " conv2d_42 (Conv2D)             (None, 1, 1, 64)     41024       ['activation_24[0][0]']          \n",
      "                                                                                                  \n",
      " batch_normalization_40 (BatchN  (None, 1, 1, 64)    256         ['conv2d_42[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " add_12 (Add)                   (None, 1, 1, 64)     0           ['batch_normalization_40[0][0]', \n",
      "                                                                  'dropout_27[0][0]']             \n",
      "                                                                                                  \n",
      " activation_25 (Activation)     (None, 1, 1, 64)     0           ['add_12[0][0]']                 \n",
      "                                                                                                  \n",
      " max_pooling2d_28 (MaxPooling2D  (None, 1, 1, 64)    0           ['activation_25[0][0]']          \n",
      " )                                                                                                \n",
      "                                                                                                  \n",
      " dropout_28 (Dropout)           (None, 1, 1, 64)     0           ['max_pooling2d_28[0][0]']       \n",
      "                                                                                                  \n",
      " conv2d_43 (Conv2D)             (None, 1, 1, 64)     41024       ['dropout_28[0][0]']             \n",
      "                                                                                                  \n",
      " batch_normalization_41 (BatchN  (None, 1, 1, 64)    256         ['conv2d_43[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " activation_26 (Activation)     (None, 1, 1, 64)     0           ['batch_normalization_41[0][0]'] \n",
      "                                                                                                  \n",
      " conv2d_44 (Conv2D)             (None, 1, 1, 64)     41024       ['activation_26[0][0]']          \n",
      "                                                                                                  \n",
      " batch_normalization_42 (BatchN  (None, 1, 1, 64)    256         ['conv2d_44[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " add_13 (Add)                   (None, 1, 1, 64)     0           ['batch_normalization_42[0][0]', \n",
      "                                                                  'dropout_28[0][0]']             \n",
      "                                                                                                  \n",
      " activation_27 (Activation)     (None, 1, 1, 64)     0           ['add_13[0][0]']                 \n",
      "                                                                                                  \n",
      " max_pooling2d_29 (MaxPooling2D  (None, 1, 1, 64)    0           ['activation_27[0][0]']          \n",
      " )                                                                                                \n",
      "                                                                                                  \n",
      " dropout_29 (Dropout)           (None, 1, 1, 64)     0           ['max_pooling2d_29[0][0]']       \n",
      "                                                                                                  \n",
      " conv2d_45 (Conv2D)             (None, 1, 1, 64)     41024       ['dropout_29[0][0]']             \n",
      "                                                                                                  \n",
      " batch_normalization_43 (BatchN  (None, 1, 1, 64)    256         ['conv2d_45[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " activation_28 (Activation)     (None, 1, 1, 64)     0           ['batch_normalization_43[0][0]'] \n",
      "                                                                                                  \n",
      " conv2d_46 (Conv2D)             (None, 1, 1, 64)     41024       ['activation_28[0][0]']          \n",
      "                                                                                                  \n",
      " batch_normalization_44 (BatchN  (None, 1, 1, 64)    256         ['conv2d_46[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " add_14 (Add)                   (None, 1, 1, 64)     0           ['batch_normalization_44[0][0]', \n",
      "                                                                  'dropout_29[0][0]']             \n",
      "                                                                                                  \n",
      " activation_29 (Activation)     (None, 1, 1, 64)     0           ['add_14[0][0]']                 \n",
      "                                                                                                  \n",
      " max_pooling2d_30 (MaxPooling2D  (None, 1, 1, 64)    0           ['activation_29[0][0]']          \n",
      " )                                                                                                \n",
      "                                                                                                  \n",
      " dropout_30 (Dropout)           (None, 1, 1, 64)     0           ['max_pooling2d_30[0][0]']       \n",
      "                                                                                                  \n",
      " conv2d_47 (Conv2D)             (None, 1, 1, 64)     41024       ['dropout_30[0][0]']             \n",
      "                                                                                                  \n",
      " batch_normalization_45 (BatchN  (None, 1, 1, 64)    256         ['conv2d_47[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " activation_30 (Activation)     (None, 1, 1, 64)     0           ['batch_normalization_45[0][0]'] \n",
      "                                                                                                  \n",
      " conv2d_48 (Conv2D)             (None, 1, 1, 64)     41024       ['activation_30[0][0]']          \n",
      "                                                                                                  \n",
      " batch_normalization_46 (BatchN  (None, 1, 1, 64)    256         ['conv2d_48[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " add_15 (Add)                   (None, 1, 1, 64)     0           ['batch_normalization_46[0][0]', \n",
      "                                                                  'dropout_30[0][0]']             \n",
      "                                                                                                  \n",
      " activation_31 (Activation)     (None, 1, 1, 64)     0           ['add_15[0][0]']                 \n",
      "                                                                                                  \n",
      " max_pooling2d_31 (MaxPooling2D  (None, 1, 1, 64)    0           ['activation_31[0][0]']          \n",
      " )                                                                                                \n",
      "                                                                                                  \n",
      " dropout_31 (Dropout)           (None, 1, 1, 64)     0           ['max_pooling2d_31[0][0]']       \n",
      "                                                                                                  \n",
      " conv2d_49 (Conv2D)             (None, 1, 1, 64)     41024       ['dropout_31[0][0]']             \n",
      "                                                                                                  \n",
      " batch_normalization_47 (BatchN  (None, 1, 1, 64)    256         ['conv2d_49[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " activation_32 (Activation)     (None, 1, 1, 64)     0           ['batch_normalization_47[0][0]'] \n",
      "                                                                                                  \n",
      " conv2d_50 (Conv2D)             (None, 1, 1, 64)     41024       ['activation_32[0][0]']          \n",
      "                                                                                                  \n",
      " batch_normalization_48 (BatchN  (None, 1, 1, 64)    256         ['conv2d_50[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " add_16 (Add)                   (None, 1, 1, 64)     0           ['batch_normalization_48[0][0]', \n",
      "                                                                  'dropout_31[0][0]']             \n",
      "                                                                                                  \n",
      " activation_33 (Activation)     (None, 1, 1, 64)     0           ['add_16[0][0]']                 \n",
      "                                                                                                  \n",
      " max_pooling2d_32 (MaxPooling2D  (None, 1, 1, 64)    0           ['activation_33[0][0]']          \n",
      " )                                                                                                \n",
      "                                                                                                  \n",
      " dropout_32 (Dropout)           (None, 1, 1, 64)     0           ['max_pooling2d_32[0][0]']       \n",
      "                                                                                                  \n",
      " conv2d_51 (Conv2D)             (None, 1, 1, 64)     41024       ['dropout_32[0][0]']             \n",
      "                                                                                                  \n",
      " batch_normalization_49 (BatchN  (None, 1, 1, 64)    256         ['conv2d_51[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " activation_34 (Activation)     (None, 1, 1, 64)     0           ['batch_normalization_49[0][0]'] \n",
      "                                                                                                  \n",
      " conv2d_52 (Conv2D)             (None, 1, 1, 64)     41024       ['activation_34[0][0]']          \n",
      "                                                                                                  \n",
      " batch_normalization_50 (BatchN  (None, 1, 1, 64)    256         ['conv2d_52[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " add_17 (Add)                   (None, 1, 1, 64)     0           ['batch_normalization_50[0][0]', \n",
      "                                                                  'dropout_32[0][0]']             \n",
      "                                                                                                  \n",
      " activation_35 (Activation)     (None, 1, 1, 64)     0           ['add_17[0][0]']                 \n",
      "                                                                                                  \n",
      " max_pooling2d_33 (MaxPooling2D  (None, 1, 1, 64)    0           ['activation_35[0][0]']          \n",
      " )                                                                                                \n",
      "                                                                                                  \n",
      " dropout_33 (Dropout)           (None, 1, 1, 64)     0           ['max_pooling2d_33[0][0]']       \n",
      "                                                                                                  \n",
      " conv2d_53 (Conv2D)             (None, 1, 1, 64)     41024       ['dropout_33[0][0]']             \n",
      "                                                                                                  \n",
      " batch_normalization_51 (BatchN  (None, 1, 1, 64)    256         ['conv2d_53[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " activation_36 (Activation)     (None, 1, 1, 64)     0           ['batch_normalization_51[0][0]'] \n",
      "                                                                                                  \n",
      " conv2d_54 (Conv2D)             (None, 1, 1, 64)     41024       ['activation_36[0][0]']          \n",
      "                                                                                                  \n",
      " batch_normalization_52 (BatchN  (None, 1, 1, 64)    256         ['conv2d_54[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " add_18 (Add)                   (None, 1, 1, 64)     0           ['batch_normalization_52[0][0]', \n",
      "                                                                  'dropout_33[0][0]']             \n",
      "                                                                                                  \n",
      " activation_37 (Activation)     (None, 1, 1, 64)     0           ['add_18[0][0]']                 \n",
      "                                                                                                  \n",
      " max_pooling2d_34 (MaxPooling2D  (None, 1, 1, 64)    0           ['activation_37[0][0]']          \n",
      " )                                                                                                \n",
      "                                                                                                  \n",
      " dropout_34 (Dropout)           (None, 1, 1, 64)     0           ['max_pooling2d_34[0][0]']       \n",
      "                                                                                                  \n",
      " conv2d_55 (Conv2D)             (None, 1, 1, 64)     41024       ['dropout_34[0][0]']             \n",
      "                                                                                                  \n",
      " batch_normalization_53 (BatchN  (None, 1, 1, 64)    256         ['conv2d_55[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " activation_38 (Activation)     (None, 1, 1, 64)     0           ['batch_normalization_53[0][0]'] \n",
      "                                                                                                  \n",
      " conv2d_56 (Conv2D)             (None, 1, 1, 64)     41024       ['activation_38[0][0]']          \n",
      "                                                                                                  \n",
      " batch_normalization_54 (BatchN  (None, 1, 1, 64)    256         ['conv2d_56[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " add_19 (Add)                   (None, 1, 1, 64)     0           ['batch_normalization_54[0][0]', \n",
      "                                                                  'dropout_34[0][0]']             \n",
      "                                                                                                  \n",
      " activation_39 (Activation)     (None, 1, 1, 64)     0           ['add_19[0][0]']                 \n",
      "                                                                                                  \n",
      " max_pooling2d_35 (MaxPooling2D  (None, 1, 1, 64)    0           ['activation_39[0][0]']          \n",
      " )                                                                                                \n",
      "                                                                                                  \n",
      " dropout_35 (Dropout)           (None, 1, 1, 64)     0           ['max_pooling2d_35[0][0]']       \n",
      "                                                                                                  \n",
      " conv2d_57 (Conv2D)             (None, 1, 1, 64)     41024       ['dropout_35[0][0]']             \n",
      "                                                                                                  \n",
      " batch_normalization_55 (BatchN  (None, 1, 1, 64)    256         ['conv2d_57[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " activation_40 (Activation)     (None, 1, 1, 64)     0           ['batch_normalization_55[0][0]'] \n",
      "                                                                                                  \n",
      " conv2d_58 (Conv2D)             (None, 1, 1, 64)     41024       ['activation_40[0][0]']          \n",
      "                                                                                                  \n",
      " batch_normalization_56 (BatchN  (None, 1, 1, 64)    256         ['conv2d_58[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " add_20 (Add)                   (None, 1, 1, 64)     0           ['batch_normalization_56[0][0]', \n",
      "                                                                  'dropout_35[0][0]']             \n",
      "                                                                                                  \n",
      " activation_41 (Activation)     (None, 1, 1, 64)     0           ['add_20[0][0]']                 \n",
      "                                                                                                  \n",
      " max_pooling2d_36 (MaxPooling2D  (None, 1, 1, 64)    0           ['activation_41[0][0]']          \n",
      " )                                                                                                \n",
      "                                                                                                  \n",
      " dropout_36 (Dropout)           (None, 1, 1, 64)     0           ['max_pooling2d_36[0][0]']       \n",
      "                                                                                                  \n",
      " conv2d_59 (Conv2D)             (None, 1, 1, 64)     41024       ['dropout_36[0][0]']             \n",
      "                                                                                                  \n",
      " batch_normalization_57 (BatchN  (None, 1, 1, 64)    256         ['conv2d_59[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " activation_42 (Activation)     (None, 1, 1, 64)     0           ['batch_normalization_57[0][0]'] \n",
      "                                                                                                  \n",
      " conv2d_60 (Conv2D)             (None, 1, 1, 64)     41024       ['activation_42[0][0]']          \n",
      "                                                                                                  \n",
      " batch_normalization_58 (BatchN  (None, 1, 1, 64)    256         ['conv2d_60[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " add_21 (Add)                   (None, 1, 1, 64)     0           ['batch_normalization_58[0][0]', \n",
      "                                                                  'dropout_36[0][0]']             \n",
      "                                                                                                  \n",
      " activation_43 (Activation)     (None, 1, 1, 64)     0           ['add_21[0][0]']                 \n",
      "                                                                                                  \n",
      " max_pooling2d_37 (MaxPooling2D  (None, 1, 1, 64)    0           ['activation_43[0][0]']          \n",
      " )                                                                                                \n",
      "                                                                                                  \n",
      " dropout_37 (Dropout)           (None, 1, 1, 64)     0           ['max_pooling2d_37[0][0]']       \n",
      "                                                                                                  \n",
      " conv2d_61 (Conv2D)             (None, 1, 1, 64)     41024       ['dropout_37[0][0]']             \n",
      "                                                                                                  \n",
      " batch_normalization_59 (BatchN  (None, 1, 1, 64)    256         ['conv2d_61[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " activation_44 (Activation)     (None, 1, 1, 64)     0           ['batch_normalization_59[0][0]'] \n",
      "                                                                                                  \n",
      " conv2d_62 (Conv2D)             (None, 1, 1, 64)     41024       ['activation_44[0][0]']          \n",
      "                                                                                                  \n",
      " batch_normalization_60 (BatchN  (None, 1, 1, 64)    256         ['conv2d_62[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " add_22 (Add)                   (None, 1, 1, 64)     0           ['batch_normalization_60[0][0]', \n",
      "                                                                  'dropout_37[0][0]']             \n",
      "                                                                                                  \n",
      " activation_45 (Activation)     (None, 1, 1, 64)     0           ['add_22[0][0]']                 \n",
      "                                                                                                  \n",
      " max_pooling2d_38 (MaxPooling2D  (None, 1, 1, 64)    0           ['activation_45[0][0]']          \n",
      " )                                                                                                \n",
      "                                                                                                  \n",
      " dropout_38 (Dropout)           (None, 1, 1, 64)     0           ['max_pooling2d_38[0][0]']       \n",
      "                                                                                                  \n",
      " conv2d_63 (Conv2D)             (None, 1, 1, 64)     41024       ['dropout_38[0][0]']             \n",
      "                                                                                                  \n",
      " batch_normalization_61 (BatchN  (None, 1, 1, 64)    256         ['conv2d_63[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " activation_46 (Activation)     (None, 1, 1, 64)     0           ['batch_normalization_61[0][0]'] \n",
      "                                                                                                  \n",
      " conv2d_64 (Conv2D)             (None, 1, 1, 64)     41024       ['activation_46[0][0]']          \n",
      "                                                                                                  \n",
      " batch_normalization_62 (BatchN  (None, 1, 1, 64)    256         ['conv2d_64[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " add_23 (Add)                   (None, 1, 1, 64)     0           ['batch_normalization_62[0][0]', \n",
      "                                                                  'dropout_38[0][0]']             \n",
      "                                                                                                  \n",
      " activation_47 (Activation)     (None, 1, 1, 64)     0           ['add_23[0][0]']                 \n",
      "                                                                                                  \n",
      " max_pooling2d_39 (MaxPooling2D  (None, 1, 1, 64)    0           ['activation_47[0][0]']          \n",
      " )                                                                                                \n",
      "                                                                                                  \n",
      " dropout_39 (Dropout)           (None, 1, 1, 64)     0           ['max_pooling2d_39[0][0]']       \n",
      "                                                                                                  \n",
      " conv2d_65 (Conv2D)             (None, 1, 1, 64)     41024       ['dropout_39[0][0]']             \n",
      "                                                                                                  \n",
      " batch_normalization_63 (BatchN  (None, 1, 1, 64)    256         ['conv2d_65[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " activation_48 (Activation)     (None, 1, 1, 64)     0           ['batch_normalization_63[0][0]'] \n",
      "                                                                                                  \n",
      " conv2d_66 (Conv2D)             (None, 1, 1, 64)     41024       ['activation_48[0][0]']          \n",
      "                                                                                                  \n",
      " batch_normalization_64 (BatchN  (None, 1, 1, 64)    256         ['conv2d_66[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " add_24 (Add)                   (None, 1, 1, 64)     0           ['batch_normalization_64[0][0]', \n",
      "                                                                  'dropout_39[0][0]']             \n",
      "                                                                                                  \n",
      " activation_49 (Activation)     (None, 1, 1, 64)     0           ['add_24[0][0]']                 \n",
      "                                                                                                  \n",
      " max_pooling2d_40 (MaxPooling2D  (None, 1, 1, 64)    0           ['activation_49[0][0]']          \n",
      " )                                                                                                \n",
      "                                                                                                  \n",
      " dropout_40 (Dropout)           (None, 1, 1, 64)     0           ['max_pooling2d_40[0][0]']       \n",
      "                                                                                                  \n",
      " conv2d_67 (Conv2D)             (None, 1, 1, 64)     41024       ['dropout_40[0][0]']             \n",
      "                                                                                                  \n",
      " batch_normalization_65 (BatchN  (None, 1, 1, 64)    256         ['conv2d_67[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " activation_50 (Activation)     (None, 1, 1, 64)     0           ['batch_normalization_65[0][0]'] \n",
      "                                                                                                  \n",
      " conv2d_68 (Conv2D)             (None, 1, 1, 64)     41024       ['activation_50[0][0]']          \n",
      "                                                                                                  \n",
      " batch_normalization_66 (BatchN  (None, 1, 1, 64)    256         ['conv2d_68[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " add_25 (Add)                   (None, 1, 1, 64)     0           ['batch_normalization_66[0][0]', \n",
      "                                                                  'dropout_40[0][0]']             \n",
      "                                                                                                  \n",
      " activation_51 (Activation)     (None, 1, 1, 64)     0           ['add_25[0][0]']                 \n",
      "                                                                                                  \n",
      " max_pooling2d_41 (MaxPooling2D  (None, 1, 1, 64)    0           ['activation_51[0][0]']          \n",
      " )                                                                                                \n",
      "                                                                                                  \n",
      " dropout_41 (Dropout)           (None, 1, 1, 64)     0           ['max_pooling2d_41[0][0]']       \n",
      "                                                                                                  \n",
      " conv2d_69 (Conv2D)             (None, 1, 1, 64)     41024       ['dropout_41[0][0]']             \n",
      "                                                                                                  \n",
      " batch_normalization_67 (BatchN  (None, 1, 1, 64)    256         ['conv2d_69[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " activation_52 (Activation)     (None, 1, 1, 64)     0           ['batch_normalization_67[0][0]'] \n",
      "                                                                                                  \n",
      " conv2d_70 (Conv2D)             (None, 1, 1, 64)     41024       ['activation_52[0][0]']          \n",
      "                                                                                                  \n",
      " batch_normalization_68 (BatchN  (None, 1, 1, 64)    256         ['conv2d_70[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " add_26 (Add)                   (None, 1, 1, 64)     0           ['batch_normalization_68[0][0]', \n",
      "                                                                  'dropout_41[0][0]']             \n",
      "                                                                                                  \n",
      " activation_53 (Activation)     (None, 1, 1, 64)     0           ['add_26[0][0]']                 \n",
      "                                                                                                  \n",
      " max_pooling2d_42 (MaxPooling2D  (None, 1, 1, 64)    0           ['activation_53[0][0]']          \n",
      " )                                                                                                \n",
      "                                                                                                  \n",
      " dropout_42 (Dropout)           (None, 1, 1, 64)     0           ['max_pooling2d_42[0][0]']       \n",
      "                                                                                                  \n",
      " conv2d_71 (Conv2D)             (None, 1, 1, 64)     41024       ['dropout_42[0][0]']             \n",
      "                                                                                                  \n",
      " batch_normalization_69 (BatchN  (None, 1, 1, 64)    256         ['conv2d_71[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " activation_54 (Activation)     (None, 1, 1, 64)     0           ['batch_normalization_69[0][0]'] \n",
      "                                                                                                  \n",
      " conv2d_72 (Conv2D)             (None, 1, 1, 64)     41024       ['activation_54[0][0]']          \n",
      "                                                                                                  \n",
      " batch_normalization_70 (BatchN  (None, 1, 1, 64)    256         ['conv2d_72[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " add_27 (Add)                   (None, 1, 1, 64)     0           ['batch_normalization_70[0][0]', \n",
      "                                                                  'dropout_42[0][0]']             \n",
      "                                                                                                  \n",
      " activation_55 (Activation)     (None, 1, 1, 64)     0           ['add_27[0][0]']                 \n",
      "                                                                                                  \n",
      " max_pooling2d_43 (MaxPooling2D  (None, 1, 1, 64)    0           ['activation_55[0][0]']          \n",
      " )                                                                                                \n",
      "                                                                                                  \n",
      " dropout_43 (Dropout)           (None, 1, 1, 64)     0           ['max_pooling2d_43[0][0]']       \n",
      "                                                                                                  \n",
      " conv2d_73 (Conv2D)             (None, 1, 1, 64)     41024       ['dropout_43[0][0]']             \n",
      "                                                                                                  \n",
      " batch_normalization_71 (BatchN  (None, 1, 1, 64)    256         ['conv2d_73[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " activation_56 (Activation)     (None, 1, 1, 64)     0           ['batch_normalization_71[0][0]'] \n",
      "                                                                                                  \n",
      " conv2d_74 (Conv2D)             (None, 1, 1, 64)     41024       ['activation_56[0][0]']          \n",
      "                                                                                                  \n",
      " batch_normalization_72 (BatchN  (None, 1, 1, 64)    256         ['conv2d_74[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " add_28 (Add)                   (None, 1, 1, 64)     0           ['batch_normalization_72[0][0]', \n",
      "                                                                  'dropout_43[0][0]']             \n",
      "                                                                                                  \n",
      " activation_57 (Activation)     (None, 1, 1, 64)     0           ['add_28[0][0]']                 \n",
      "                                                                                                  \n",
      " max_pooling2d_44 (MaxPooling2D  (None, 1, 1, 64)    0           ['activation_57[0][0]']          \n",
      " )                                                                                                \n",
      "                                                                                                  \n",
      " dropout_44 (Dropout)           (None, 1, 1, 64)     0           ['max_pooling2d_44[0][0]']       \n",
      "                                                                                                  \n",
      " conv2d_75 (Conv2D)             (None, 1, 1, 64)     41024       ['dropout_44[0][0]']             \n",
      "                                                                                                  \n",
      " batch_normalization_73 (BatchN  (None, 1, 1, 64)    256         ['conv2d_75[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " activation_58 (Activation)     (None, 1, 1, 64)     0           ['batch_normalization_73[0][0]'] \n",
      "                                                                                                  \n",
      " conv2d_76 (Conv2D)             (None, 1, 1, 64)     41024       ['activation_58[0][0]']          \n",
      "                                                                                                  \n",
      " batch_normalization_74 (BatchN  (None, 1, 1, 64)    256         ['conv2d_76[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " add_29 (Add)                   (None, 1, 1, 64)     0           ['batch_normalization_74[0][0]', \n",
      "                                                                  'dropout_44[0][0]']             \n",
      "                                                                                                  \n",
      " activation_59 (Activation)     (None, 1, 1, 64)     0           ['add_29[0][0]']                 \n",
      "                                                                                                  \n",
      " max_pooling2d_45 (MaxPooling2D  (None, 1, 1, 64)    0           ['activation_59[0][0]']          \n",
      " )                                                                                                \n",
      "                                                                                                  \n",
      " dropout_45 (Dropout)           (None, 1, 1, 64)     0           ['max_pooling2d_45[0][0]']       \n",
      "                                                                                                  \n",
      " conv2d_77 (Conv2D)             (None, 1, 1, 64)     41024       ['dropout_45[0][0]']             \n",
      "                                                                                                  \n",
      " batch_normalization_75 (BatchN  (None, 1, 1, 64)    256         ['conv2d_77[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " activation_60 (Activation)     (None, 1, 1, 64)     0           ['batch_normalization_75[0][0]'] \n",
      "                                                                                                  \n",
      " conv2d_78 (Conv2D)             (None, 1, 1, 64)     41024       ['activation_60[0][0]']          \n",
      "                                                                                                  \n",
      " batch_normalization_76 (BatchN  (None, 1, 1, 64)    256         ['conv2d_78[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " add_30 (Add)                   (None, 1, 1, 64)     0           ['batch_normalization_76[0][0]', \n",
      "                                                                  'dropout_45[0][0]']             \n",
      "                                                                                                  \n",
      " activation_61 (Activation)     (None, 1, 1, 64)     0           ['add_30[0][0]']                 \n",
      "                                                                                                  \n",
      " max_pooling2d_46 (MaxPooling2D  (None, 1, 1, 64)    0           ['activation_61[0][0]']          \n",
      " )                                                                                                \n",
      "                                                                                                  \n",
      " dropout_46 (Dropout)           (None, 1, 1, 64)     0           ['max_pooling2d_46[0][0]']       \n",
      "                                                                                                  \n",
      " conv2d_79 (Conv2D)             (None, 1, 1, 64)     41024       ['dropout_46[0][0]']             \n",
      "                                                                                                  \n",
      " batch_normalization_77 (BatchN  (None, 1, 1, 64)    256         ['conv2d_79[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " activation_62 (Activation)     (None, 1, 1, 64)     0           ['batch_normalization_77[0][0]'] \n",
      "                                                                                                  \n",
      " conv2d_80 (Conv2D)             (None, 1, 1, 64)     41024       ['activation_62[0][0]']          \n",
      "                                                                                                  \n",
      " batch_normalization_78 (BatchN  (None, 1, 1, 64)    256         ['conv2d_80[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " add_31 (Add)                   (None, 1, 1, 64)     0           ['batch_normalization_78[0][0]', \n",
      "                                                                  'dropout_46[0][0]']             \n",
      "                                                                                                  \n",
      " activation_63 (Activation)     (None, 1, 1, 64)     0           ['add_31[0][0]']                 \n",
      "                                                                                                  \n",
      " max_pooling2d_47 (MaxPooling2D  (None, 1, 1, 64)    0           ['activation_63[0][0]']          \n",
      " )                                                                                                \n",
      "                                                                                                  \n",
      " dropout_47 (Dropout)           (None, 1, 1, 64)     0           ['max_pooling2d_47[0][0]']       \n",
      "                                                                                                  \n",
      " flatten_2 (Flatten)            (None, 64)           0           ['dropout_47[0][0]']             \n",
      "                                                                                                  \n",
      " dense_2 (Dense)                (None, 4)            260         ['flatten_2[0][0]']              \n",
      "                                                                                                  \n",
      "==================================================================================================\n",
      "Total params: 2,656,324\n",
      "Trainable params: 2,648,132\n",
      "Non-trainable params: 8,192\n",
      "__________________________________________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "from keras.models import Model\n",
    "from keras.layers import Input, Conv2D, MaxPooling2D, BatchNormalization, Dropout, Flatten, Dense, add\n",
    "from keras.layers import Activation\n",
    "\n",
    "def residual_block(input_tensor, filters, kernel_size=(10, 1), strides=(1, 1), activation='elu'):\n",
    "    x = Conv2D(filters, kernel_size, padding='same', strides=strides)(input_tensor)\n",
    "    x = BatchNormalization()(x)\n",
    "    x = Activation(activation)(x)\n",
    "\n",
    "    x = Conv2D(filters, kernel_size, padding='same')(x)\n",
    "    x = BatchNormalization()(x)\n",
    "\n",
    "    x = add([x, input_tensor])\n",
    "    x = Activation(activation)(x)\n",
    "    return x\n",
    "\n",
    "input_shape = (500, 1, 22)\n",
    "inputs = Input(shape=input_shape)\n",
    "\n",
    "x = inputs\n",
    "for _ in range(33): # Each block contains 3 Conv2D layers; 33 blocks make 99 layers + input layer = 100 layers\n",
    "    x = Conv2D(64, (10, 1), padding='same', activation='elu')(x) if _ == 0 else residual_block(x, 64)\n",
    "    x = MaxPooling2D(pool_size=(3, 1), padding='same')(x)\n",
    "    x = Dropout(0.5)(x)\n",
    "\n",
    "x = Flatten()(x)\n",
    "outputs = Dense(4, activation='softmax')(x)\n",
    "\n",
    "model = Model(inputs=inputs, outputs=outputs)\n",
    "\n",
    "model.summary()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/50\n",
      "26/26 [==============================] - 304s 11s/step - loss: 30.1620 - accuracy: 0.2681 - val_loss: 44.5980 - val_accuracy: 0.2740\n",
      "Epoch 2/50\n",
      "10/26 [==========>...................] - ETA: 3:03 - loss: 15.1752 - accuracy: 0.2516"
     ]
    }
   ],
   "source": [
    "from keras.optimizers import Adam\n",
    "from keras.callbacks import ModelCheckpoint, EarlyStopping\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Assuming X_train, Y_train, X_val, Y_val, X_test, Y_test are already defined\n",
    "\n",
    "# Model compilation\n",
    "model.compile(optimizer=Adam(learning_rate=1e-3), loss='categorical_crossentropy', metrics=['accuracy'])\n",
    "\n",
    "# Callbacks\n",
    "checkpoint = ModelCheckpoint('best_model.h5', save_best_only=True, monitor='val_loss', mode='min')\n",
    "early_stopping = EarlyStopping(monitor='val_loss', patience=10, verbose=1)\n",
    "\n",
    "# Training the model\n",
    "history = model.fit(x_train, y_train, validation_data=(x_valid, y_valid), epochs=50, batch_size=64, callbacks=[checkpoint, early_stopping])\n",
    "\n",
    "# Testing the model\n",
    "test_loss, test_acc = model.evaluate(y_test, y_test)\n",
    "print(f'Test accuracy: {test_acc}, Test loss: {test_loss}')\n",
    "\n",
    "# Plotting the training and validation loss and accuracy\n",
    "plt.figure(figsize=(12, 5))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Training and Validation Loss')\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['accuracy'], label='Training Accuracy')\n",
    "plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n",
    "plt.title('Training and Validation Accuracy')\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "ename": "RuntimeError",
     "evalue": "Given groups=1, weight of size [64, 3, 7, 7], expected input[64, 500, 1, 22] to have 3 channels, but got 500 channels instead",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[32], line 70\u001b[0m\n\u001b[1;32m     67\u001b[0m         \u001b[39mprint\u001b[39m(\u001b[39mf\u001b[39m\u001b[39m'\u001b[39m\u001b[39mEpoch \u001b[39m\u001b[39m{\u001b[39;00mepoch\u001b[39m+\u001b[39m\u001b[39m1\u001b[39m\u001b[39m}\u001b[39;00m\u001b[39m, Loss: \u001b[39m\u001b[39m{\u001b[39;00mavg_loss\u001b[39m}\u001b[39;00m\u001b[39m, Val Loss: \u001b[39m\u001b[39m{\u001b[39;00mavg_val_loss\u001b[39m}\u001b[39;00m\u001b[39m'\u001b[39m)\n\u001b[1;32m     69\u001b[0m \u001b[39m# Train the model\u001b[39;00m\n\u001b[0;32m---> 70\u001b[0m train_model(model, train_loader, val_loader, criterion, optimizer)\n\u001b[1;32m     72\u001b[0m \u001b[39m# Load the best model\u001b[39;00m\n\u001b[1;32m     73\u001b[0m model\u001b[39m.\u001b[39mload_state_dict(torch\u001b[39m.\u001b[39mload(\u001b[39m'\u001b[39m\u001b[39mbest_model.pth\u001b[39m\u001b[39m'\u001b[39m))\n",
      "Cell \u001b[0;32mIn[32], line 46\u001b[0m, in \u001b[0;36mtrain_model\u001b[0;34m(model, train_loader, val_loader, criterion, optimizer, num_epochs)\u001b[0m\n\u001b[1;32m     44\u001b[0m data, target \u001b[39m=\u001b[39m data\u001b[39m.\u001b[39mto(device), target\u001b[39m.\u001b[39mto(device)\n\u001b[1;32m     45\u001b[0m optimizer\u001b[39m.\u001b[39mzero_grad()\n\u001b[0;32m---> 46\u001b[0m output \u001b[39m=\u001b[39m model(data)\n\u001b[1;32m     47\u001b[0m loss \u001b[39m=\u001b[39m criterion(output, target)\n\u001b[1;32m     48\u001b[0m loss\u001b[39m.\u001b[39mbackward()\n",
      "File \u001b[0;32m~/miniconda3/envs/d2l/lib/python3.9/site-packages/torch/nn/modules/module.py:1501\u001b[0m, in \u001b[0;36mModule._call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1496\u001b[0m \u001b[39m# If we don't have any hooks, we want to skip the rest of the logic in\u001b[39;00m\n\u001b[1;32m   1497\u001b[0m \u001b[39m# this function, and just call forward.\u001b[39;00m\n\u001b[1;32m   1498\u001b[0m \u001b[39mif\u001b[39;00m \u001b[39mnot\u001b[39;00m (\u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_backward_hooks \u001b[39mor\u001b[39;00m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_backward_pre_hooks \u001b[39mor\u001b[39;00m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_forward_hooks \u001b[39mor\u001b[39;00m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_forward_pre_hooks\n\u001b[1;32m   1499\u001b[0m         \u001b[39mor\u001b[39;00m _global_backward_pre_hooks \u001b[39mor\u001b[39;00m _global_backward_hooks\n\u001b[1;32m   1500\u001b[0m         \u001b[39mor\u001b[39;00m _global_forward_hooks \u001b[39mor\u001b[39;00m _global_forward_pre_hooks):\n\u001b[0;32m-> 1501\u001b[0m     \u001b[39mreturn\u001b[39;00m forward_call(\u001b[39m*\u001b[39;49margs, \u001b[39m*\u001b[39;49m\u001b[39m*\u001b[39;49mkwargs)\n\u001b[1;32m   1502\u001b[0m \u001b[39m# Do not call functions when jit is used\u001b[39;00m\n\u001b[1;32m   1503\u001b[0m full_backward_hooks, non_full_backward_hooks \u001b[39m=\u001b[39m [], []\n",
      "File \u001b[0;32m~/miniconda3/envs/d2l/lib/python3.9/site-packages/torchvision/models/resnet.py:285\u001b[0m, in \u001b[0;36mResNet.forward\u001b[0;34m(self, x)\u001b[0m\n\u001b[1;32m    284\u001b[0m \u001b[39mdef\u001b[39;00m \u001b[39mforward\u001b[39m(\u001b[39mself\u001b[39m, x: Tensor) \u001b[39m-\u001b[39m\u001b[39m>\u001b[39m Tensor:\n\u001b[0;32m--> 285\u001b[0m     \u001b[39mreturn\u001b[39;00m \u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49m_forward_impl(x)\n",
      "File \u001b[0;32m~/miniconda3/envs/d2l/lib/python3.9/site-packages/torchvision/models/resnet.py:268\u001b[0m, in \u001b[0;36mResNet._forward_impl\u001b[0;34m(self, x)\u001b[0m\n\u001b[1;32m    266\u001b[0m \u001b[39mdef\u001b[39;00m \u001b[39m_forward_impl\u001b[39m(\u001b[39mself\u001b[39m, x: Tensor) \u001b[39m-\u001b[39m\u001b[39m>\u001b[39m Tensor:\n\u001b[1;32m    267\u001b[0m     \u001b[39m# See note [TorchScript super()]\u001b[39;00m\n\u001b[0;32m--> 268\u001b[0m     x \u001b[39m=\u001b[39m \u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49mconv1(x)\n\u001b[1;32m    269\u001b[0m     x \u001b[39m=\u001b[39m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39mbn1(x)\n\u001b[1;32m    270\u001b[0m     x \u001b[39m=\u001b[39m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39mrelu(x)\n",
      "File \u001b[0;32m~/miniconda3/envs/d2l/lib/python3.9/site-packages/torch/nn/modules/module.py:1501\u001b[0m, in \u001b[0;36mModule._call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1496\u001b[0m \u001b[39m# If we don't have any hooks, we want to skip the rest of the logic in\u001b[39;00m\n\u001b[1;32m   1497\u001b[0m \u001b[39m# this function, and just call forward.\u001b[39;00m\n\u001b[1;32m   1498\u001b[0m \u001b[39mif\u001b[39;00m \u001b[39mnot\u001b[39;00m (\u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_backward_hooks \u001b[39mor\u001b[39;00m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_backward_pre_hooks \u001b[39mor\u001b[39;00m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_forward_hooks \u001b[39mor\u001b[39;00m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_forward_pre_hooks\n\u001b[1;32m   1499\u001b[0m         \u001b[39mor\u001b[39;00m _global_backward_pre_hooks \u001b[39mor\u001b[39;00m _global_backward_hooks\n\u001b[1;32m   1500\u001b[0m         \u001b[39mor\u001b[39;00m _global_forward_hooks \u001b[39mor\u001b[39;00m _global_forward_pre_hooks):\n\u001b[0;32m-> 1501\u001b[0m     \u001b[39mreturn\u001b[39;00m forward_call(\u001b[39m*\u001b[39;49margs, \u001b[39m*\u001b[39;49m\u001b[39m*\u001b[39;49mkwargs)\n\u001b[1;32m   1502\u001b[0m \u001b[39m# Do not call functions when jit is used\u001b[39;00m\n\u001b[1;32m   1503\u001b[0m full_backward_hooks, non_full_backward_hooks \u001b[39m=\u001b[39m [], []\n",
      "File \u001b[0;32m~/miniconda3/envs/d2l/lib/python3.9/site-packages/torch/nn/modules/conv.py:463\u001b[0m, in \u001b[0;36mConv2d.forward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m    462\u001b[0m \u001b[39mdef\u001b[39;00m \u001b[39mforward\u001b[39m(\u001b[39mself\u001b[39m, \u001b[39minput\u001b[39m: Tensor) \u001b[39m-\u001b[39m\u001b[39m>\u001b[39m Tensor:\n\u001b[0;32m--> 463\u001b[0m     \u001b[39mreturn\u001b[39;00m \u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49m_conv_forward(\u001b[39minput\u001b[39;49m, \u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49mweight, \u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49mbias)\n",
      "File \u001b[0;32m~/miniconda3/envs/d2l/lib/python3.9/site-packages/torch/nn/modules/conv.py:459\u001b[0m, in \u001b[0;36mConv2d._conv_forward\u001b[0;34m(self, input, weight, bias)\u001b[0m\n\u001b[1;32m    455\u001b[0m \u001b[39mif\u001b[39;00m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39mpadding_mode \u001b[39m!=\u001b[39m \u001b[39m'\u001b[39m\u001b[39mzeros\u001b[39m\u001b[39m'\u001b[39m:\n\u001b[1;32m    456\u001b[0m     \u001b[39mreturn\u001b[39;00m F\u001b[39m.\u001b[39mconv2d(F\u001b[39m.\u001b[39mpad(\u001b[39minput\u001b[39m, \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_reversed_padding_repeated_twice, mode\u001b[39m=\u001b[39m\u001b[39mself\u001b[39m\u001b[39m.\u001b[39mpadding_mode),\n\u001b[1;32m    457\u001b[0m                     weight, bias, \u001b[39mself\u001b[39m\u001b[39m.\u001b[39mstride,\n\u001b[1;32m    458\u001b[0m                     _pair(\u001b[39m0\u001b[39m), \u001b[39mself\u001b[39m\u001b[39m.\u001b[39mdilation, \u001b[39mself\u001b[39m\u001b[39m.\u001b[39mgroups)\n\u001b[0;32m--> 459\u001b[0m \u001b[39mreturn\u001b[39;00m F\u001b[39m.\u001b[39;49mconv2d(\u001b[39minput\u001b[39;49m, weight, bias, \u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49mstride,\n\u001b[1;32m    460\u001b[0m                 \u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49mpadding, \u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49mdilation, \u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49mgroups)\n",
      "\u001b[0;31mRuntimeError\u001b[0m: Given groups=1, weight of size [64, 3, 7, 7], expected input[64, 500, 1, 22] to have 3 channels, but got 500 channels instead"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torchvision.models as models\n",
    "from torch.optim import Adam\n",
    "from torch.utils.data import DataLoader, TensorDataset\n",
    "from torchvision import transforms\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Assuming X_train, Y_train, X_val, Y_val, X_test, Y_test are already loaded and are numpy arrays\n",
    "# Convert numpy arrays to PyTorch tensors and create datasets\n",
    "train_dataset = TensorDataset(torch.tensor(x_train).float(), torch.tensor(y_train).long())\n",
    "val_dataset = TensorDataset(torch.tensor(x_valid).float(), torch.tensor(y_valid).long())\n",
    "test_dataset = TensorDataset(torch.tensor(x_test).float(), torch.tensor(y_test).long())\n",
    "\n",
    "# Data loaders\n",
    "train_loader = DataLoader(train_dataset, batch_size=64, shuffle=True)\n",
    "val_loader = DataLoader(val_dataset, batch_size=64, shuffle=False)\n",
    "test_loader = DataLoader(test_dataset, batch_size=64, shuffle=False)\n",
    "\n",
    "# Modify this according to the actual size of your data\n",
    "num_classes = 4\n",
    "\n",
    "# Load ResNet model\n",
    "model = models.resnet50(pretrained=True)\n",
    "\n",
    "# Modify the last fully connected layer of the ResNet model for num_classes\n",
    "model.fc = nn.Linear(model.fc.in_features, num_classes)\n",
    "\n",
    "# Transfer model to GPU device\n",
    "device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n",
    "model.to(device)\n",
    "\n",
    "# Loss and optimizer\n",
    "criterion = nn.CrossEntropyLoss()\n",
    "optimizer = Adam(model.parameters(), lr=1e-3)\n",
    "\n",
    "# Training function\n",
    "def train_model(model, train_loader, val_loader, criterion, optimizer, num_epochs=50):\n",
    "    best_val_loss = float('inf')\n",
    "    for epoch in range(num_epochs):\n",
    "        model.train()\n",
    "        total_loss = 0\n",
    "        for data, target in train_loader:\n",
    "            data, target = data.to(device), target.to(device)\n",
    "            optimizer.zero_grad()\n",
    "            output = model(data)\n",
    "            loss = criterion(output, target)\n",
    "            loss.backward()\n",
    "            optimizer.step()\n",
    "            total_loss += loss.item()\n",
    "        avg_loss = total_loss / len(train_loader)\n",
    "        \n",
    "        model.eval()\n",
    "        total_val_loss = 0\n",
    "        with torch.no_grad():\n",
    "            for data, target in val_loader:\n",
    "                data, target = data.to(device), target.to(device)\n",
    "                output = model(data)\n",
    "                loss = criterion(output, target)\n",
    "                total_val_loss += loss.item()\n",
    "        avg_val_loss = total_val_loss / len(val_loader)\n",
    "        \n",
    "        if avg_val_loss < best_val_loss:\n",
    "            best_val_loss = avg_val_loss\n",
    "            torch.save(model.state_dict(), 'best_model.pth')\n",
    "        \n",
    "        print(f'Epoch {epoch+1}, Loss: {avg_loss}, Val Loss: {avg_val_loss}')\n",
    "\n",
    "# Train the model\n",
    "train_model(model, train_loader, val_loader, criterion, optimizer)\n",
    "\n",
    "# Load the best model\n",
    "model.load_state_dict(torch.load('best_model.pth'))\n",
    "\n",
    "# Evaluate on test data\n",
    "model.eval()\n",
    "test_loss = 0\n",
    "correct = 0\n",
    "with torch.no_grad():\n",
    "    for data, target in test_loader:\n",
    "        data, target = data.to(device), target.to(device)\n",
    "        output = model(data)\n",
    "        test_loss += criterion(output, target).item()\n",
    "        pred = output.argmax(dim=1, keepdim=True)\n",
    "        correct += pred.eq(target.view_as(pred)).sum().item()\n",
    "\n",
    "test_loss /= len(test_loader.dataset)\n",
    "test_accuracy = 100. * correct / len(test_loader.dataset)\n",
    "\n",
    "print(f'\\nTest set: Average loss: {test_loss:.4f}, Accuracy: {correct}/{len(test_loader.dataset)} ({test_accuracy:.0f}%)')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "ename": "RuntimeError",
     "evalue": "Given groups=1, weight of size [3, 1, 3, 3], expected input[64, 500, 1, 22] to have 1 channels, but got 500 channels instead",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[33], line 81\u001b[0m\n\u001b[1;32m     78\u001b[0m         \u001b[39mprint\u001b[39m(\u001b[39mf\u001b[39m\u001b[39m'\u001b[39m\u001b[39mEpoch \u001b[39m\u001b[39m{\u001b[39;00mepoch\u001b[39m+\u001b[39m\u001b[39m1\u001b[39m\u001b[39m}\u001b[39;00m\u001b[39m, Loss: \u001b[39m\u001b[39m{\u001b[39;00mavg_loss\u001b[39m}\u001b[39;00m\u001b[39m, Val Loss: \u001b[39m\u001b[39m{\u001b[39;00mavg_val_loss\u001b[39m}\u001b[39;00m\u001b[39m'\u001b[39m)\n\u001b[1;32m     80\u001b[0m \u001b[39m# Train the model\u001b[39;00m\n\u001b[0;32m---> 81\u001b[0m train_model(model, train_loader, val_loader, criterion, optimizer)\n\u001b[1;32m     83\u001b[0m \u001b[39m# Load the best model\u001b[39;00m\n\u001b[1;32m     84\u001b[0m model\u001b[39m.\u001b[39mload_state_dict(torch\u001b[39m.\u001b[39mload(\u001b[39m'\u001b[39m\u001b[39mbest_model.pth\u001b[39m\u001b[39m'\u001b[39m))\n",
      "Cell \u001b[0;32mIn[33], line 57\u001b[0m, in \u001b[0;36mtrain_model\u001b[0;34m(model, train_loader, val_loader, criterion, optimizer, num_epochs)\u001b[0m\n\u001b[1;32m     55\u001b[0m data, target \u001b[39m=\u001b[39m data\u001b[39m.\u001b[39mto(device), target\u001b[39m.\u001b[39mto(device)\n\u001b[1;32m     56\u001b[0m optimizer\u001b[39m.\u001b[39mzero_grad()\n\u001b[0;32m---> 57\u001b[0m output \u001b[39m=\u001b[39m model(data)\n\u001b[1;32m     58\u001b[0m loss \u001b[39m=\u001b[39m criterion(output, target)\n\u001b[1;32m     59\u001b[0m loss\u001b[39m.\u001b[39mbackward()\n",
      "File \u001b[0;32m~/miniconda3/envs/d2l/lib/python3.9/site-packages/torch/nn/modules/module.py:1501\u001b[0m, in \u001b[0;36mModule._call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1496\u001b[0m \u001b[39m# If we don't have any hooks, we want to skip the rest of the logic in\u001b[39;00m\n\u001b[1;32m   1497\u001b[0m \u001b[39m# this function, and just call forward.\u001b[39;00m\n\u001b[1;32m   1498\u001b[0m \u001b[39mif\u001b[39;00m \u001b[39mnot\u001b[39;00m (\u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_backward_hooks \u001b[39mor\u001b[39;00m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_backward_pre_hooks \u001b[39mor\u001b[39;00m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_forward_hooks \u001b[39mor\u001b[39;00m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_forward_pre_hooks\n\u001b[1;32m   1499\u001b[0m         \u001b[39mor\u001b[39;00m _global_backward_pre_hooks \u001b[39mor\u001b[39;00m _global_backward_hooks\n\u001b[1;32m   1500\u001b[0m         \u001b[39mor\u001b[39;00m _global_forward_hooks \u001b[39mor\u001b[39;00m _global_forward_pre_hooks):\n\u001b[0;32m-> 1501\u001b[0m     \u001b[39mreturn\u001b[39;00m forward_call(\u001b[39m*\u001b[39;49margs, \u001b[39m*\u001b[39;49m\u001b[39m*\u001b[39;49mkwargs)\n\u001b[1;32m   1502\u001b[0m \u001b[39m# Do not call functions when jit is used\u001b[39;00m\n\u001b[1;32m   1503\u001b[0m full_backward_hooks, non_full_backward_hooks \u001b[39m=\u001b[39m [], []\n",
      "Cell \u001b[0;32mIn[33], line 33\u001b[0m, in \u001b[0;36mCustomResNet.forward\u001b[0;34m(self, x)\u001b[0m\n\u001b[1;32m     32\u001b[0m \u001b[39mdef\u001b[39;00m \u001b[39mforward\u001b[39m(\u001b[39mself\u001b[39m, x):\n\u001b[0;32m---> 33\u001b[0m     x \u001b[39m=\u001b[39m \u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49madaptation_layer(x)\n\u001b[1;32m     34\u001b[0m     x \u001b[39m=\u001b[39m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39mresnet(x)\n\u001b[1;32m     35\u001b[0m     \u001b[39mreturn\u001b[39;00m x\n",
      "File \u001b[0;32m~/miniconda3/envs/d2l/lib/python3.9/site-packages/torch/nn/modules/module.py:1501\u001b[0m, in \u001b[0;36mModule._call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1496\u001b[0m \u001b[39m# If we don't have any hooks, we want to skip the rest of the logic in\u001b[39;00m\n\u001b[1;32m   1497\u001b[0m \u001b[39m# this function, and just call forward.\u001b[39;00m\n\u001b[1;32m   1498\u001b[0m \u001b[39mif\u001b[39;00m \u001b[39mnot\u001b[39;00m (\u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_backward_hooks \u001b[39mor\u001b[39;00m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_backward_pre_hooks \u001b[39mor\u001b[39;00m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_forward_hooks \u001b[39mor\u001b[39;00m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_forward_pre_hooks\n\u001b[1;32m   1499\u001b[0m         \u001b[39mor\u001b[39;00m _global_backward_pre_hooks \u001b[39mor\u001b[39;00m _global_backward_hooks\n\u001b[1;32m   1500\u001b[0m         \u001b[39mor\u001b[39;00m _global_forward_hooks \u001b[39mor\u001b[39;00m _global_forward_pre_hooks):\n\u001b[0;32m-> 1501\u001b[0m     \u001b[39mreturn\u001b[39;00m forward_call(\u001b[39m*\u001b[39;49margs, \u001b[39m*\u001b[39;49m\u001b[39m*\u001b[39;49mkwargs)\n\u001b[1;32m   1502\u001b[0m \u001b[39m# Do not call functions when jit is used\u001b[39;00m\n\u001b[1;32m   1503\u001b[0m full_backward_hooks, non_full_backward_hooks \u001b[39m=\u001b[39m [], []\n",
      "File \u001b[0;32m~/miniconda3/envs/d2l/lib/python3.9/site-packages/torch/nn/modules/container.py:217\u001b[0m, in \u001b[0;36mSequential.forward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m    215\u001b[0m \u001b[39mdef\u001b[39;00m \u001b[39mforward\u001b[39m(\u001b[39mself\u001b[39m, \u001b[39minput\u001b[39m):\n\u001b[1;32m    216\u001b[0m     \u001b[39mfor\u001b[39;00m module \u001b[39min\u001b[39;00m \u001b[39mself\u001b[39m:\n\u001b[0;32m--> 217\u001b[0m         \u001b[39minput\u001b[39m \u001b[39m=\u001b[39m module(\u001b[39minput\u001b[39;49m)\n\u001b[1;32m    218\u001b[0m     \u001b[39mreturn\u001b[39;00m \u001b[39minput\u001b[39m\n",
      "File \u001b[0;32m~/miniconda3/envs/d2l/lib/python3.9/site-packages/torch/nn/modules/module.py:1501\u001b[0m, in \u001b[0;36mModule._call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1496\u001b[0m \u001b[39m# If we don't have any hooks, we want to skip the rest of the logic in\u001b[39;00m\n\u001b[1;32m   1497\u001b[0m \u001b[39m# this function, and just call forward.\u001b[39;00m\n\u001b[1;32m   1498\u001b[0m \u001b[39mif\u001b[39;00m \u001b[39mnot\u001b[39;00m (\u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_backward_hooks \u001b[39mor\u001b[39;00m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_backward_pre_hooks \u001b[39mor\u001b[39;00m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_forward_hooks \u001b[39mor\u001b[39;00m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_forward_pre_hooks\n\u001b[1;32m   1499\u001b[0m         \u001b[39mor\u001b[39;00m _global_backward_pre_hooks \u001b[39mor\u001b[39;00m _global_backward_hooks\n\u001b[1;32m   1500\u001b[0m         \u001b[39mor\u001b[39;00m _global_forward_hooks \u001b[39mor\u001b[39;00m _global_forward_pre_hooks):\n\u001b[0;32m-> 1501\u001b[0m     \u001b[39mreturn\u001b[39;00m forward_call(\u001b[39m*\u001b[39;49margs, \u001b[39m*\u001b[39;49m\u001b[39m*\u001b[39;49mkwargs)\n\u001b[1;32m   1502\u001b[0m \u001b[39m# Do not call functions when jit is used\u001b[39;00m\n\u001b[1;32m   1503\u001b[0m full_backward_hooks, non_full_backward_hooks \u001b[39m=\u001b[39m [], []\n",
      "File \u001b[0;32m~/miniconda3/envs/d2l/lib/python3.9/site-packages/torch/nn/modules/conv.py:463\u001b[0m, in \u001b[0;36mConv2d.forward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m    462\u001b[0m \u001b[39mdef\u001b[39;00m \u001b[39mforward\u001b[39m(\u001b[39mself\u001b[39m, \u001b[39minput\u001b[39m: Tensor) \u001b[39m-\u001b[39m\u001b[39m>\u001b[39m Tensor:\n\u001b[0;32m--> 463\u001b[0m     \u001b[39mreturn\u001b[39;00m \u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49m_conv_forward(\u001b[39minput\u001b[39;49m, \u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49mweight, \u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49mbias)\n",
      "File \u001b[0;32m~/miniconda3/envs/d2l/lib/python3.9/site-packages/torch/nn/modules/conv.py:459\u001b[0m, in \u001b[0;36mConv2d._conv_forward\u001b[0;34m(self, input, weight, bias)\u001b[0m\n\u001b[1;32m    455\u001b[0m \u001b[39mif\u001b[39;00m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39mpadding_mode \u001b[39m!=\u001b[39m \u001b[39m'\u001b[39m\u001b[39mzeros\u001b[39m\u001b[39m'\u001b[39m:\n\u001b[1;32m    456\u001b[0m     \u001b[39mreturn\u001b[39;00m F\u001b[39m.\u001b[39mconv2d(F\u001b[39m.\u001b[39mpad(\u001b[39minput\u001b[39m, \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_reversed_padding_repeated_twice, mode\u001b[39m=\u001b[39m\u001b[39mself\u001b[39m\u001b[39m.\u001b[39mpadding_mode),\n\u001b[1;32m    457\u001b[0m                     weight, bias, \u001b[39mself\u001b[39m\u001b[39m.\u001b[39mstride,\n\u001b[1;32m    458\u001b[0m                     _pair(\u001b[39m0\u001b[39m), \u001b[39mself\u001b[39m\u001b[39m.\u001b[39mdilation, \u001b[39mself\u001b[39m\u001b[39m.\u001b[39mgroups)\n\u001b[0;32m--> 459\u001b[0m \u001b[39mreturn\u001b[39;00m F\u001b[39m.\u001b[39;49mconv2d(\u001b[39minput\u001b[39;49m, weight, bias, \u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49mstride,\n\u001b[1;32m    460\u001b[0m                 \u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49mpadding, \u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49mdilation, \u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49mgroups)\n",
      "\u001b[0;31mRuntimeError\u001b[0m: Given groups=1, weight of size [3, 1, 3, 3], expected input[64, 500, 1, 22] to have 1 channels, but got 500 channels instead"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torchvision.models as models\n",
    "from torch.optim import Adam\n",
    "from torch.utils.data import DataLoader, TensorDataset\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Assuming x_train, y_train, x_valid, y_valid, x_test, y_test are correctly named and loaded as numpy arrays\n",
    "train_dataset = TensorDataset(torch.tensor(x_train).float(), torch.tensor(y_train).long())\n",
    "val_dataset = TensorDataset(torch.tensor(x_valid).float(), torch.tensor(y_valid).long())\n",
    "test_dataset = TensorDataset(torch.tensor(x_test).float(), torch.tensor(y_test).long())\n",
    "\n",
    "# Data loaders\n",
    "train_loader = DataLoader(train_dataset, batch_size=64, shuffle=True)\n",
    "val_loader = DataLoader(val_dataset, batch_size=64, shuffle=False)\n",
    "test_loader = DataLoader(test_dataset, batch_size=64, shuffle=False)\n",
    "\n",
    "# Modify this according to the actual size of your data\n",
    "num_classes = 22\n",
    "\n",
    "# Custom model starting with a convolutional layer to adapt input shape\n",
    "class CustomResNet(nn.Module):\n",
    "    def __init__(self, num_classes):\n",
    "        super(CustomResNet, self).__init__()\n",
    "        self.adaptation_layer = nn.Sequential(\n",
    "            nn.Conv2d(1, 3, kernel_size=(3, 3), padding=(1, 1), stride=(1, 1)), # Adapt the input from 1 to 3 channels\n",
    "            nn.ReLU()\n",
    "        )\n",
    "        self.resnet = models.resnet50(pretrained=True)\n",
    "        self.resnet.fc = nn.Linear(self.resnet.fc.in_features, num_classes)  # Adjust for your number of classes\n",
    "    \n",
    "    def forward(self, x):\n",
    "        x = self.adaptation_layer(x)\n",
    "        x = self.resnet(x)\n",
    "        return x\n",
    "\n",
    "# Initialize the model\n",
    "model = CustomResNet(num_classes=num_classes)\n",
    "\n",
    "# Transfer model to GPU device\n",
    "device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n",
    "model.to(device)\n",
    "\n",
    "# Loss and optimizer\n",
    "criterion = nn.CrossEntropyLoss()\n",
    "optimizer = Adam(model.parameters(), lr=1e-3)\n",
    "\n",
    "# Training function\n",
    "def train_model(model, train_loader, val_loader, criterion, optimizer, num_epochs=50):\n",
    "    best_val_loss = float('inf')\n",
    "    for epoch in range(num_epochs):\n",
    "        model.train()\n",
    "        total_loss = 0\n",
    "        for data, target in train_loader:\n",
    "            data, target = data.to(device), target.to(device)\n",
    "            optimizer.zero_grad()\n",
    "            output = model(data)\n",
    "            loss = criterion(output, target)\n",
    "            loss.backward()\n",
    "            optimizer.step()\n",
    "            total_loss += loss.item()\n",
    "        avg_loss = total_loss / len(train_loader)\n",
    "        \n",
    "        model.eval()\n",
    "        total_val_loss = 0\n",
    "        with torch.no_grad():\n",
    "            for data, target in val_loader:\n",
    "                data, target = data.to(device), target.to(device)\n",
    "                output = model(data)\n",
    "                loss = criterion(output, target)\n",
    "                total_val_loss += loss.item()\n",
    "        avg_val_loss = total_val_loss / len(val_loader)\n",
    "        \n",
    "        if avg_val_loss < best_val_loss:\n",
    "            best_val_loss = avg_val_loss\n",
    "            torch.save(model.state_dict(), 'best_model.pth')\n",
    "        \n",
    "        print(f'Epoch {epoch+1}, Loss: {avg_loss}, Val Loss: {avg_val_loss}')\n",
    "\n",
    "# Train the model\n",
    "train_model(model, train_loader, val_loader, criterion, optimizer)\n",
    "\n",
    "# Load the best model\n",
    "model.load_state_dict(torch.load('best_model.pth'))\n",
    "\n",
    "# Evaluate on test data\n",
    "model.eval()\n",
    "test_loss = 0\n",
    "correct = 0\n",
    "with torch.no_grad():\n",
    "    for data, target in test_loader:\n",
    "        data, target = data.to(device), target.to(device)\n",
    "        output = model(data)\n",
    "        test_loss += criterion(output, target).item()\n",
    "        pred = output.argmax(dim=1, keepdim=True)\n",
    "        correct += pred.eq(target.view_as(pred)).sum().item()\n",
    "\n",
    "test_loss /= len(test_loader.dataset)\n",
    "test_accuracy = 100. * correct / len(test_loader.dataset)\n",
    "\n",
    "print(f'\\nTest set: Average loss: {test_loss:.4f}, Accuracy: {correct}/{len(test_loader.dataset)} ({test_accuracy:.0f}%)')\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
